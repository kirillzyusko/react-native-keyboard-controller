name: 🛠 iOS e2e tests
on:
  pull_request:
    paths:
      - ".github/workflows/ios-e2e-test.yml"
      - "react-native-keyboard-controller.podspec"
      - "package.json"
      - "ios/**"
      - "example/**"
      - "e2e/**"
      - "src/**"
  push:
    branches:
      - main
    paths:
      - ".github/workflows/ios-e2e-test.yml"
      - "react-native-keyboard-controller.podspec"
      - "package.json"
      - "ios/**"
      - "example/**"
      - "e2e/**"
      - "src/**"

jobs:
  build:
    name: 🏗️ Build E2E ipa
    runs-on: macos-14
    timeout-minutes: 60
    env:
      WORKING_DIRECTORY: example
    concurrency:
      group: ios-e2e-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "yarn"
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.4"
      - name: Get Xcode version
        run: xcodebuild -version
      - name: Save yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install root dependencies
        run: yarn install
      - name: Install example project dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: yarn
      - name: Install e2e dependencies
        run: yarn install --cwd e2e
      - name: Install Ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 1.5G
          key: ${{ runner.os }}-ccache-e2e-ios
          create-symlink: true
      - name: Setup ccache behavior
        run: |
          echo "CCACHE_SLOPPINESS=clang_index_store,file_stat_matches,include_file_ctime,include_file_mtime,ivfsoverlay,pch_defines,modules,system_headers,time_macros" >> $GITHUB_ENV
          echo "CCACHE_FILECLONE=true" >> $GITHUB_ENV
          echo "CCACHE_DEPEND=true" >> $GITHUB_ENV
          echo "CCACHE_INODECACHE=true" >> $GITHUB_ENV
      - name: Restore Pods cache
        uses: actions/cache@v4
        with:
          path: |
            example/ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: Install pods
        working-directory: ${{ env.WORKING_DIRECTORY }}/ios
        run: export USE_CCACHE=1 && pod install
      - name: Build app
        working-directory: e2e
        run: yarn build-example:ios
      - uses: actions/upload-artifact@v4
        with:
          name: ios-e2e-ipa
          path: example/ios/build/Build/Products/Release-iphonesimulator/KeyboardControllerExample.app/**
  e2e-test:
    name: ⚙️ Automated test cases (iOS-${{ matrix.devices.ios }})
    runs-on: macos-${{ matrix.devices.macos }}
    timeout-minutes: 90
    env:
      WORKING_DIRECTORY: example
    concurrency:
      group: ios-e2e-${{ matrix.devices.ios }}-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        devices: [
            { ios: 15, xcode: "15.4", macos: 14, runtime: "15.5" },
            { ios: 16, xcode: "15.4", macos: 14, runtime: "16.4" },
            { ios: 17, xcode: "15.4", macos: 14 },
            # { ios: 18, xcode: "16.0", macos: 15 },
          ]
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-e2e-ipa
          path: example/ios/build/Build/Products/Release-iphonesimulator/KeyboardControllerExample.app/
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.devices.xcode }}
      - name: Get Xcode version
        run: xcodebuild -version
      - name: Install additional iOS runtimes
        if: ${{ matrix.devices.runtime != '' && matrix.devices.runtime != null }}
        run: |
          # Set parameters for retry logic
          TIMEOUT=600  # Timeout for each attempt in seconds (10 minutes)
          MAX_RETRIES=3
          RETRY_INTERVAL=60  # Wait time between retries in seconds (1 minute)
          RETRY_COUNT=0
          SUCCESS=0

          # Function to execute command with a manual timeout
          run_with_timeout() {
            local command="$1"
            local start_time=$(date +%s)

            # Run the command in the background
            eval "$command" &
            local pid=$!

            # Monitor the command with a timeout
            while kill -0 $pid 2>/dev/null; do
              local current_time=$(date +%s)
              local elapsed_time=$((current_time - start_time))

              # If timeout is exceeded, kill the command
              if [[ $elapsed_time -ge $TIMEOUT ]]; then
                echo "Command timed out after ${TIMEOUT} seconds."
                kill -9 $pid
                wait $pid 2>/dev/null
                return 124  # Return code 124 for timeout
              fi

              # Sleep briefly to avoid a busy loop
              sleep 5
            done

            # Wait for command to finish and capture exit code
            wait $pid
            return $?
          }

          # Start the retry loop
          while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES to install iOS runtime..."

            # Execute the command with a manual timeout
            COMMAND_EXIT_CODE=0
            run_with_timeout "brew tap robotsandpencils/made && sudo xcodes runtimes install --keep-archive 'iOS ${{ matrix.devices.runtime }}'" || COMMAND_EXIT_CODE=$?

            # Check if the command succeeded
            if [[ $COMMAND_EXIT_CODE -eq 0 ]]; then
              SUCCESS=1
              echo "iOS runtime installation successful."
              break
            elif [[ $COMMAND_EXIT_CODE -eq 124 ]]; then
              echo "Installation timed out after ${TIMEOUT} seconds"
            else
              echo "Installation failed with exit code $COMMAND_EXIT_CODE"
            fi

            echo "Retrying installation in $RETRY_INTERVAL seconds..."
            sleep $RETRY_INTERVAL

            # Increment the retry counter
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done

          # Exit with error if all attempts failed
          if [[ $SUCCESS -eq 0 ]]; then
            echo "All attempts to install iOS runtime failed."
            exit 1
          fi
      - name: List all available simulators
        run: xcrun simctl list
      - name: Install AppleSimulatorUtils
        run: brew tap wix/brew && brew install applesimutils
      - name: Save yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install root dependencies
        run: yarn install
      - name: Install e2e dependencies
        run: yarn install --cwd e2e
      - name: Use software keyboard
        run: defaults write com.apple.iphonesimulator ConnectHardwareKeyboard -bool NO
      - name: Test app
        working-directory: e2e
        run: SOFT_CHECK=false yarn test-example:ios-${{ matrix.devices.ios }}
      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ios-fail-screen-shoots
          path: e2e/artifacts
