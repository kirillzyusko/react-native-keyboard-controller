"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1438],{61697:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=o(74848),n=o(28453);const a={keywords:["react-native-keyboard-controller","useKeyboardState","react hook"],sidebar_position:4},s="useKeyboardState",i={id:"api/hooks/keyboard/use-keyboard-state",title:"useKeyboardState",description:"useKeyboardState is a hook which gives an access to current keyboard state. This hook combines data from KeyboardController.state() and KeyboardController.isVisible() methods and makes it reactive (i. e. triggers a re-render when keyboard state/visibility has changed).",source:"@site/versioned_docs/version-1.17.0/api/hooks/keyboard/use-keyboard-state.mdx",sourceDirName:"api/hooks/keyboard",slug:"/api/hooks/keyboard/use-keyboard-state",permalink:"/react-native-keyboard-controller/docs/api/hooks/keyboard/use-keyboard-state",draft:!1,unlisted:!1,editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/versioned_docs/version-1.17.0/api/hooks/keyboard/use-keyboard-state.mdx",tags:[],version:"1.17.0",sidebarPosition:4,frontMatter:{keywords:["react-native-keyboard-controller","useKeyboardState","react hook"],sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"useKeyboardHandler",permalink:"/react-native-keyboard-controller/docs/api/hooks/keyboard/use-keyboard-handler/"},next:{title:"useFocusedInputHandler",permalink:"/react-native-keyboard-controller/docs/api/hooks/input/use-focused-input-handler"}},d={},c=[{value:"Data structure",id:"data-structure",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"usekeyboardstate",children:"useKeyboardState"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"useKeyboardState"})," is a hook which gives an access to current keyboard state. This hook combines data from ",(0,r.jsx)(t.code,{children:"KeyboardController.state()"})," and ",(0,r.jsx)(t.code,{children:"KeyboardController.isVisible()"})," methods and makes it reactive (i. e. triggers a re-render when keyboard state/visibility has changed)."]}),"\n",(0,r.jsxs)(t.admonition,{type:"warning",children:[(0,r.jsxs)(t.p,{children:["Use this hook only when you need to control ",(0,r.jsx)(t.code,{children:"props"})," of views returned in JSX-markup. If you need to access the keyboard ",(0,r.jsx)(t.code,{children:"state"})," in callbacks or event handlers then consider to use ",(0,r.jsx)(t.a,{href:"/react-native-keyboard-controller/docs/api/keyboard-controller#state",children:"KeyboardController.state()"})," or ",(0,r.jsx)(t.a,{href:"/react-native-keyboard-controller/docs/api/keyboard-controller#isvisible",children:"KeyboardController.isVisible()"})," methods instead. This allows you to retrieve values as needed without triggering unnecessary re-renders."]}),(0,r.jsxs)("div",{className:"code-grid",children:[(0,r.jsx)("div",{className:"code-block",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:'title="\u2705 Recommended \ud83d\udc4d"',children:"// use KeyboardController.isVisible()\n\n<Button\n  onPress={() => {\n    // read value on demand\n    if (KeyboardController.isVisible()) {\n      // ...\n    }\n  }}\n>\n  Go to Next Page\n</Button>\n"})})}),(0,r.jsx)("div",{className:"code-block",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:'title="\u274c Not recommended \ud83d\ude45\u200d\u2642\ufe0f"',children:"const { isVisible } = useKeyboardState();\n\n<Button\n  onPress={() => {\n    // don't consume state from hook\n    if (isVisible) {\n      // ...\n    }\n  }}\n>\n  Go to next Page\n</Button>;\n"})})})]})]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["Also make sure that if you need to change style based on keyboard presence then you are using corresponding ",(0,r.jsx)(t.a,{href:"./use-keyboard-animation",children:"animated"})," hooks to offload animation to a native thread and free up resources for JS thread."]})}),"\n",(0,r.jsx)(t.h2,{id:"data-structure",children:"Data structure"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"KeyboardState"})," is represented by following structure:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"type KeyboardState = {\n  isVisible: boolean;\n  height: number;\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused `TextInput`\n  type: string; // `keyboardType` property from focused `TextInput`\n  appearance: string; // `keyboardAppearance` property from focused `TextInput`\n};\n"})}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'import { View, Text, StyleSheet } from "react-native";\nimport { useKeyboardState } from "react-native-keyboard-controller";\n\nconst ShowcaseComponent = () => {\n  const { isVisible } = useKeyboardState();\n\n  return (\n    <View style={isVisible ? styles.highlighted : null}>\n      <Text>Address form</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  highlighted: {\n    borderColor: "#0070D8",\n  },\n});\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Also have a look on ",(0,r.jsx)(t.a,{href:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/example",children:"example"})," app for more comprehensive usage."]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>i});var r=o(96540);const n={},a=r.createContext(n);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);