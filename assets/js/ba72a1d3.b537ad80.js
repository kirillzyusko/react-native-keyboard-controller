"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5054],{2098:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"release-1-12","metadata":{"permalink":"/react-native-keyboard-controller/blog/release-1-12","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2024-05-13-release-1-12/index.mdx","source":"@site/blog/2024-05-13-release-1-12/index.mdx","title":"Announcing upcoming release \ud83d\udce3","description":"I\'m excited to announce the latest release, version 1.12.0, of react-native-keyboard-controller!","date":"2024-05-13T00:00:00.000Z","tags":[{"inline":true,"label":"react-native","permalink":"/react-native-keyboard-controller/blog/tags/react-native"},{"inline":true,"label":"keyboard","permalink":"/react-native-keyboard-controller/blog/tags/keyboard"},{"inline":true,"label":"bridgeless","permalink":"/react-native-keyboard-controller/blog/tags/bridgeless"}],"readingTime":2.745,"hasTruncateMarker":true,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"release-1-12","title":"Announcing upcoming release \ud83d\udce3","authors":["kirill"],"tags":["react-native","keyboard","bridgeless"],"keywords":["react-native-keyboard-controller","keyboard","bridgeless","keyboard toolbar"]},"unlisted":false,"nextItem":{"title":"New KeyboardToolbar component \ud83d\ude0d","permalink":"/react-native-keyboard-controller/blog/keyboard-toolbar"}},"content":"I\'m excited to announce the latest release, version 1.12.0, of react-native-keyboard-controller!\\n\\nAlthough this release may not seem monumental, it\'s significant, and I\'m thrilled to share it with you. \ud83d\ude0d\\n\\nThe key features of this release are: **bridgeless** support, selection tracking, enhanced `KeyboardToolbar` component and synchronous `onMove` handler on iOS among other bug fixes and improvements.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Bridgeless support\\n\\nThis library starting from `1.12.0` is now compatible RN 0.74 and fully supports bridgeless mode, offering improved performance and streamlined communication between native and JavaScript layers.\\n\\n## Selection tracking\\n\\nIn the previous version, `react-native-keyboard-controller` was not able to track selection changes in the text input fields. Starting from `1.12.0` this library exposes a new event and handlers making it possible to track selection changes.\\n\\nIn addition to duplicating the react-native API, this event provides information not only about the `start` and `end` positions but also the `x` and `y` coordinates for the top-left and bottom-right corners of the selection.\\n\\nThese details allow you to draw elements behind the cursor, making interaction with focused inputs more intuitive:\\n\\nimport Video from \\"@site/src/components/Video\\";\\n\\n<Video src=\\"/video/selection-demo.mov\\" width={65} />\\n<br />\\n\\nLater on I\'m planning to extend `KeyboardAwareScrollView` to react on selection tracking, so if your selection is overlapped with keyboard then `KeyboardAwareScrollView` will automatically scroll and avoid an overlap.\\n\\n## `KeyboardToolbar` enhancements\\n\\nThe `KeyboardToolbar` component was initially introduced in version `1.10.0`. In this release, I\'ve added new features to make it even more customizable and HID compatible.\\n\\n### `blur` effect\\n\\nStarting with version `1.12.0`, you can apply a blur effect to the `KeyboardToolbar` component by using the `blur` prop. You can use any compatible component, such as `react-native-blur` or `expo-blur`. Since iOS 16, the keyboard itself is translucent with a blur effect, which causes all components behind it to be blurred too.\\n\\nWith the new version of `react-native-keyboard-controller`, you can extend this effect to the `KeyboardToolbar` component! \ud83d\ude0e\\n\\n### Button callbacks\\n\\nFrom version `1.12.0`, the `KeyboardToolbar` component supports various callbacks for specific events, such as `onNextCallback`, `onPrevCallback`, and `onDoneCallback`.\\n\\nThese callbacks let you add **haptic** feedback, **play sounds**, or implement other creative responses based on your needs.\\n\\n## Synchronous `onMove` handler on iOS\\n\\nSince version `1.4.0`, when the `useKeyboardHandler` hook was introduced, the `onMove` handler was always a frame behind.\\n\\nAs a result, it created a parallax effect that prevented elements from precisely following the keyboard.\\n\\nWith a new release this problem is solved, and the `onMove` handler is now synchronized with the keyboard animation. \ud83d\ude0a\\n\\n## No need to patch `react-native-text-input-mask` anymore\\n\\nIf you used `react-native-text-input-mask` alongside `useFocusedInputHandler` or `KeyboardAwareScrollView`, you might have needed to patch it to ensure that the `onChangeText` event was triggered.\\n\\nWith the new release of `react-native-keyboard-controller`, you can now safely remove this patch and keep your existing code intact. \ud83d\udc4d\\n\\n## What\'s next?\\n\\nThis release refines the previous version and at the same time introduces crucial improvements that will unlock the full potential of `react-native-keyboard-controller` in future updates:\\n\\n- on iOS, we now inject a delegate into `TextInput`, providing greater control over input and keyboard events;\\n- the fully synchronous `onMove` handler will enable frame-by-frame keyboard control in the future, particularly when an interactive keyboard offset is implemented. \ud83d\udc40\\n\\nTo stay tuned follow me on [Twitter](https://twitter.com/ziusko) and [GitHub](https://github.com/kirillzyusko) for updates. Thank you for your support! \ud83d\ude0a"},{"id":"keyboard-toolbar","metadata":{"permalink":"/react-native-keyboard-controller/blog/keyboard-toolbar","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2024-02-21-keyboard-toolbar/index.mdx","source":"@site/blog/2024-02-21-keyboard-toolbar/index.mdx","title":"New KeyboardToolbar component \ud83d\ude0d","description":"I\'m glad to announce a groundbreaking feature that\'s set to transform the way users interact with keyboards in your app: the KeyboardToolbar. This feature will enhance typing efficiency and increase user satisfaction. \ud83d\ude0e","date":"2024-02-21T00:00:00.000Z","tags":[{"inline":true,"label":"react-native","permalink":"/react-native-keyboard-controller/blog/tags/react-native"},{"inline":true,"label":"keyboard","permalink":"/react-native-keyboard-controller/blog/tags/keyboard"},{"inline":true,"label":"keyboard toolbar","permalink":"/react-native-keyboard-controller/blog/tags/keyboard-toolbar"}],"readingTime":2.92,"hasTruncateMarker":true,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"keyboard-toolbar","title":"New KeyboardToolbar component \ud83d\ude0d","authors":["kirill"],"tags":["react-native","keyboard","keyboard toolbar"],"keywords":["react-native-keyboard-controller","keyboard","keyboard toolbar","keyboard next button","keyboard previous button","keyboard done button"]},"unlisted":false,"prevItem":{"title":"Announcing upcoming release \ud83d\udce3","permalink":"/react-native-keyboard-controller/blog/release-1-12"},"nextItem":{"title":"New release features, a year overview","permalink":"/react-native-keyboard-controller/blog/release-1-10"}},"content":"I\'m glad to announce a groundbreaking feature that\'s set to transform the way users interact with keyboards in your app: the `KeyboardToolbar`. This feature will enhance typing efficiency and increase user satisfaction. \ud83d\ude0e\\n\\nimport Lottie from \\"lottie-react\\";\\nimport lottie from \\"../../docs/api/components/keyboard-toolbar/toolbar.lottie.json\\";\\n\\n<div style={{ display: \\"flex\\", justifyContent: \\"center\\", marginBottom: 20 }}>\\n  <Lottie\\n    className=\\"lottie\\"\\n    animationData={lottie}\\n    style={{ width: 400, height: 400 }}\\n    loop\\n  />\\n</div>\\n\\n\x3c!-- truncate --\x3e\\n\\n## Why `KeyboardToolbar`?\\n\\nIn the digital age, the keyboard is not just a tool; it\'s the gateway to communication, creativity, and connection. Recognizing this, I set out to redefine the keyboard experience, making it more intuitive, seamless, and, most importantly, tailored to your users needs. So I\'m happy to reveal `KeyboardToolbar` - a sleek, customizable toolbar that sticks to your keyboard like a faithful companion, ready to streamline your typing journey. \ud83d\ude0d\\n\\n## Why do I need another toolbar component if `react-native-keyboard-manager` already provides an implementation?\\n\\nWhile `react-native-keyboard-manager` offers a toolbar component powered by `IQKeyboardManager`, it still lack some features, such as:\\n\\n- missing Android support;\\n- lack of full customization (you can not render custom content/buttons/icons, perform custom actions on clicks, etc.);\\n- issues when integrating custom input components (date pickers, bottom sheets, etc.).\\n\\nTaking all these points into consideration, I decided to create a **new** component that would overcome these limitations, while at the same time maintaining a simple API so that developers can easily work with it.\\n\\nI was inspired by `IQKeyboardManager` functionality and its ease of integration into iOS projects, so I decided to replicate their algorithms for view traversal on both Android and iOS.\\n\\nFor sure, the current implementation only covers basic use cases, but I plan to extend the functionality to cover more and more various edge cases in the future. \ud83d\ude0e\\n\\n## The simple API behind a new component\\n\\nThe UI of the new component is implemented using `react-native` primitives (thus allowing great customization). However, the functionality for moving focus to `next` and `previous` fields is implemented on the native side and is powered by a simple API:\\n\\n```ts\\nimport { KeyboardController } from \\"react-native-keyboard-controller\\";\\n\\n// this will move focus to the next TextInput\\nKeyboardController.setFocusTo(\\"next\\");\\n// or if we want to set focus to previous field\\nKeyboardController.setFocusTo(\\"prev\\");\\n```\\n\\nLast but not least - the new API allows you to restore focus to the last focused input \ud83e\udd2f. To achieve this, you should use:\\n\\n```tsx\\nimport { KeyboardController } from \\"react-native-keyboard-controller\\";\\n\\n// if keyboard is closed - it\'ll restore a focus\\n// if keyboard is open - it will not do anything\\nKeyboardController.setFocusTo(\\"current\\");\\n```\\n\\nSo, as you can see, for simple navigation to `next` and `previous` fields, you don\'t need to create a complex solutions with an array of `refs` in JS code - now it\'s powered by the new API of this library and allows you to delegate control to the library and simplify your codebase \ud83d\ude0e\\n\\n## Instead of summary\\n\\nAs I roll out the `KeyboardToolbar`, I invite you to join me in this exciting journey. Elevate your app\'s user experience, redefine keyboard interaction, and watch as your users engage with your app in ways never imagined before. Stay tuned for more updates, and get ready to embrace the future of keyboard navigation.\\n\\nTo start to use this feature install the latest `react-native-keyboard-controller` version `1.11.0` and add this component into your app. \ud83d\ude0e Also don\'t forget to check [example](https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/example) app to see how it\'s implemented there \ud83d\udc40\\n\\nFollow me on [Twitter](https://twitter.com/ziusko) and [GitHub](https://github.com/kirillzyusko) for updates. Thank you for your support! \ud83d\ude0a"},{"id":"release-1-10","metadata":{"permalink":"/react-native-keyboard-controller/blog/release-1-10","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2023-12-26-release-1-10/index.mdx","source":"@site/blog/2023-12-26-release-1-10/index.mdx","title":"New release features, a year overview","description":"I\'m thrilled to announce the latest release, version 1.10.0, of react-native-keyboard-controller! Packed with new functionalities and improvements, this update aims to enhance your React Native development experience.","date":"2023-12-26T00:00:00.000Z","tags":[{"inline":true,"label":"react-native","permalink":"/react-native-keyboard-controller/blog/tags/react-native"},{"inline":true,"label":"keyboard","permalink":"/react-native-keyboard-controller/blog/tags/keyboard"},{"inline":true,"label":"focused text input","permalink":"/react-native-keyboard-controller/blog/tags/focused-text-input"},{"inline":true,"label":"keyboard aware scroll view","permalink":"/react-native-keyboard-controller/blog/tags/keyboard-aware-scroll-view"},{"inline":true,"label":"dismiss","permalink":"/react-native-keyboard-controller/blog/tags/dismiss"}],"readingTime":2.79,"hasTruncateMarker":true,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"release-1-10","title":"New release features, a year overview","authors":["kirill"],"tags":["react-native","keyboard","focused text input","keyboard aware scroll view","dismiss"],"keywords":["react-native-keyboard-controller","keyboard","focused text input","onChangeText","changed text","dismiss","keyboard aware scroll view"]},"unlisted":false,"prevItem":{"title":"New KeyboardToolbar component \ud83d\ude0d","permalink":"/react-native-keyboard-controller/blog/keyboard-toolbar"},"nextItem":{"title":"New release, new features, achieved milestones","permalink":"/react-native-keyboard-controller/blog/new-features-achieved-milestones"}},"content":"I\'m thrilled to announce the latest release, version `1.10.0`, of `react-native-keyboard-controller`! Packed with new functionalities and improvements, this update aims to enhance your React Native development experience.\\n\\nimport Lottie from \\"lottie-react\\";\\nimport lottie from \\"../../src/components/HomepageFeatures/text-inputs.lottie.json\\";\\n\\n<div style={{ display: \\"flex\\", justifyContent: \\"center\\", marginBottom: 20 }}>\\n  <Lottie\\n    className=\\"lottie\\"\\n    animationData={lottie}\\n    style={{ width: 400, height: 400 }}\\n    loop\\n  />\\n</div>\\n\\n\x3c!-- truncate --\x3e\\n\\n## Key features\\n\\n### `useFocusedInputHandler` hook\\n\\nIntroducing the `useFocusedInputHandler` hook! This powerful addition empowers developers to manage focused input with unparalleled ease. The hook comes with a straightforward signature:\\n\\n```ts\\nuseFocusedInputHandler(\\n  {\\n    onChangeText: ({ text }) => {\\n      \\"worklet\\";\\n\\n      // Your custom logic here\\n    },\\n  },\\n  [],\\n);\\n```\\n\\nWhenever you are building your own avoiding solution or tracking user activity this hook can be a perfect fit for your needs!\\n\\n### Exporting `KeyboardAwareScrollView`\\n\\nI\'ve heard your feedback, and in response, I\'m now exporting `KeyboardAwareScrollView` from the library core. This widely-used component provides an enhanced `ScrollView` experience, ensuring smoother navigation and improved user interactions. Now, you can effortlessly integrate it into your projects and leverage its capabilities for a more polished UI \ud83d\ude0e\\n\\n### `KeyboardController.dismiss()` method\\n\\nSimplify your workflow with the addition of the `KeyboardController.dismiss()` method. This method streamlines the dismissal of the keyboard, making it a breeze to manage user input interactions. Enhance the user experience by effortlessly controlling when and how the keyboard should disappear.\\n\\n## Reflecting on a Productive Year: 2023 \ud83c\udf81\ud83c\udf85\\n\\nAs we bid farewell to 2023, it\'s a moment to reflect on the incredible strides we\'ve made together. This year has been marked by innovation, user-centric enhancements, and the continuous evolution of our toolkit. Here\'s a summary of the key milestones:\\n\\n### Interactive Keyboard Implementation\\n\\nI took a giant leap forward by implementing an interactive keyboard. This feature enhances user engagement and provides a dynamic interface for a more immersive experience. Now, user interactions with the keyboard are not just functional but also interactive and enjoyable \ud83d\ude0a\\n\\n### Expanded Event Metadata\\n\\nIn response to your needs, I introduced new metadata fields \u2014 `duration`, `target` and `timestamp` \u2014 to events. These additions provide more comprehensive insights into user interactions, enabling you to fine-tune and optimize your applications with a deeper understanding of user behavior.\\n\\n### Diverse Component Additions\\n\\nMy commitment to versatility led to the incorporation of several new components. The introduction of `KeyboardAvoidingView`, `KeyboardStickyFooter`, and `KeyboardAwareScrollView` opens up a world of possibilities for crafting responsive and user-friendly interfaces. These components are designed to seamlessly integrate into your projects, offering enhanced UI control.\\n\\n### Empowering Hooks\\n\\nEmpowering developers with more tools, I introduced a series of new hooks. From the versatile `useKeyboardController` to the focused input management provided by `useReanimatedFocusedInput` and the feature-rich `useFocusedInputHandler` hook, these additions streamline development and elevate the capabilities of your React Native applications.\\n\\n## Looking Forward to 2024 \u2603\ufe0f\ud83c\udf84\u2744\ufe0f\\n\\nAs I embark on the journey into the new year, the excitement is palpable. I\'m eager to build upon the successes of 2023 and bring even more features to the table. Our roadmap is filled with promising enhancements, and I can\'t wait to share them with you. Your feedback has been invaluable, and I look forward to continuing this collaborative journey in the coming year.\\n\\nThank you for being a part of our community. Here\'s to a year of growth, collaboration, and the continued evolution of your React Native development experience!"},{"id":"new-features-achieved-milestones","metadata":{"permalink":"/react-native-keyboard-controller/blog/new-features-achieved-milestones","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2023-11-01-new-features-achieved-milestones/index.mdx","source":"@site/blog/2023-11-01-new-features-achieved-milestones/index.mdx","title":"New release, new features, achieved milestones","description":"In this blog post I\'d like to make an overview of new features available in 1.9.0 as well as going through the big milestones that were achieved \ud83d\ude0e","date":"2023-11-01T00:00:00.000Z","tags":[{"inline":true,"label":"react-native","permalink":"/react-native-keyboard-controller/blog/tags/react-native"},{"inline":true,"label":"keyboard","permalink":"/react-native-keyboard-controller/blog/tags/keyboard"},{"inline":true,"label":"new hook","permalink":"/react-native-keyboard-controller/blog/tags/new-hook"},{"inline":true,"label":"sticky view","permalink":"/react-native-keyboard-controller/blog/tags/sticky-view"},{"inline":true,"label":"achieved milestones","permalink":"/react-native-keyboard-controller/blog/tags/achieved-milestones"}],"readingTime":6.045,"hasTruncateMarker":true,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"new-features-achieved-milestones","title":"New release, new features, achieved milestones","authors":["kirill"],"tags":["react-native","keyboard","new hook","sticky view","achieved milestones"],"keywords":["react-native-keyboard-controller","keyboard","keyboard sticky view","sticky view","KeyboardStickyView","focused input","focused input layout","useReanimatedFocusedInput"]},"unlisted":false,"prevItem":{"title":"New release features, a year overview","permalink":"/react-native-keyboard-controller/blog/release-1-10"},"nextItem":{"title":"New setEnabled method","permalink":"/react-native-keyboard-controller/blog/set-enabled"}},"content":"In this blog post I\'d like to make an overview of new features available in `1.9.0` as well as going through the big milestones that were achieved \ud83d\ude0e\\n\\n## Introducing the New Features in react-native-keyboard-controller\\n\\nI\'m excited to announce the latest release of `react-native-keyboard-controller`! This update brings two powerful new features to help you manage the keyboard behavior in your React Native applications. Whether you\'re building a simple form or a complex UI, these additions will make your life easier \ud83d\ude0e\\n\\nimport Lottie from \\"lottie-react\\";\\nimport lottie from \\"../../docs/api/components/keyboard-sticky-view/ksv.lottie.json\\";\\n\\n<div style={{ display: \\"flex\\", justifyContent: \\"center\\", marginBottom: 20 }}>\\n  <Lottie\\n    className=\\"lottie\\"\\n    animationData={lottie}\\n    style={{ width: 400, height: 400 }}\\n    loop\\n  />\\n</div>\\n\\n\x3c!-- truncate --\x3e\\n\\n### `KeyboardStickyView`\\n\\n`KeyboardStickyView` is a new component that simplifies handling keyboard interactions in your React Native applications. With this component, you can easily ensure that the content inside remains visible, accessible and is sticky to the keyboard movement. Here are some of the key features:\\n\\n- **Auto-Adjustment**: The `KeyboardStickyView` automatically adjusts the position of your UI components when the keyboard is displayed, ensuring that your content inside a container remains visible.\\n- **Customizable Behavior**: You have full control over how the UI adjusts when the keyboard is shown or hidden. You can specify `offset` property and it\'ll automatically interpolate values based on keyboard animation to make the transition seamless.\\n- **Universal Compatibility**: Whether your users are on Android or iOS, `KeyboardStickyView` ensures that your content remains accessible and visible, even when the keyboard appears. No more platform-specific quirks; it just works.\\n- **Custom Content**: The flexibility of `KeyboardStickyView` shines as you can place any content inside it. It\'s perfect for multi-step flows, chats, or any scenario where you need buttons and widgets to remain easily accessible when the keyboard is up.\\n- **Effortless Integration**: Implementing `KeyboardStickyView` in your app is a breeze. Just wrap your UI elements within this component, and it takes care of the rest. It automatically adjusts the position of your UI components as the keyboard is shown or hidden.\\n\\n### `useReanimatedFocusedInput` hook\\n\\nThis hook represents a significant evolution from the features introduced in the `1.6.0` release. In `1.6.0`, a new `target` property was introduced to fetch the layout of the currently focused `TextInput`. While it served its purpose, it came with a set of challenges:\\n\\n- **Complex Setup on Fabric Architecture**: Setting up this feature on the new Fabric architecture posed complications, including the use of deprecated APIs like `findNodeHandle`.\\n- **Inconsistencies Across Architectures**: The measurements could sometimes yield different results depending on the underlying architecture in use.\\n- **Inability to Detect Layout Changes**: It lacked the ability to detect layout changes for the focused `TextInput` within the library\'s ecosystem.\\n\\nConsidering these challenges, the decision was made to enhance the library\'s capabilities and introduce a new hook that simplifies interactions with the API while addressing the issues mentioned above. And thus, I present to you...\ud83e\udd41\\n\\nThe new `useReanimatedFocusedInput` hook \ud83d\ude0e. This hook eliminates the need for integrating or using third-party elements, ensuring consistent functionality across all platforms and architectures. Its standout feature is its ability to detect events crucial for building robust keyboard handling, even beyond direct keyboard interactions, such as the detection of layout changes.\\n\\nWith `useReanimatedFocusedInput`, I\'ve created a more streamlined and versatile solution to meet your needs.\\n\\n## Achieved milestones\\n\\n### \ud83c\udf89 Celebrating 1000 Stars: A Heartfelt Thank You to Our Incredible Community \ud83c\udf1f\\n\\nThe `react-native-keyboard-controller` has reached an incredible milestone - **1000** stars! \ud83d\ude80 This achievement wouldn\'t have been possible without the unwavering support and contributions from amazing community of developers and enthusiasts.\\n\\nI want to take a moment to express my deepest gratitude to each and every one of you who has been a part of this journey. Your support, engagement, and feedback have played a crucial role in shaping this project and making it what it is today.\\n\\nThank You for:\\n\\n\ud83d\ude4c **Star Power**: Your stars show your endorsement and appreciation for my work. Each star represents a vote of confidence and encouragement.\\n\\n\ud83d\udcac **Engaging Feedback**: Your questions, suggestions, and issues have helped me improve the library and make it more robust. Your thoughtful feedback is invaluable.\\n\\n\ud83d\udc69\u200d\ud83d\udcbb **Contributions**: Many of you have contributed your time and expertise to enhance the project. Your code, documentation updates, and bug reports have been a driving force behind my progress.\\n\\n\ud83c\udf10 **Spreading the Word**: Sharing the project within your networks has helped me grow and reach a wider audience. Your support has a ripple effect.\\n\\n\ud83e\udd1d Community Spirit: Your active participation in discussions, forums, and events related to the library creates a sense of unity and shared purpose.\\n\\n### \ud83d\udcc8 8.000 weekly downloads on npm\\n\\nWhile **8.000** weekly downloads on npm is undoubtedly a milestone to celebrate, I want to take a moment to express my heartfelt appreciation to every single user of `react-native-keyboard-controller`. Whether you\'ve been with me from the beginning or you\'ve just started using the library, your trust and support mean a lot for me.\\n\\nIt\'s not about the size of the number; it\'s about the impact each one of you makes in your own unique way. Every user is an integral part of the growing community, contributing to the success and development of the project. Your feedback, your questions, your ideas, and your trust are what keep me inspired and motivated!\\n\\nSo, thank you. Thank you for choosing `react-native-keyboard-controller` for your applications. Your faith in the library drives me to continually improve, innovate, and provide you with the best tools for your React Native projects.\\n\\n### Special Thank You \u2764\ufe0f\\n\\nEspecially I want to make a huge shoot out to:\\n\\n- [Hirbod](https://github.com/hirbod) for your sponsoring, promotion, contributions and early library adoption \ud83d\ude0e\\n- [Ivan](https://github.com/IvanIhnatsiuk) for your ideas, help and early adoption of this library \ud83d\udcaa\\n- [Ksu](https://github.com/ksugaevskaya) for your sponsoring, help and mental support on every step of this library creation, I appreciate it \u2764\ufe0f\\n- [Marcelo T Prado](https://github.com/MarceloPrado) for your sponsoring, active participation in issue resolution, contributions, and fresh ideas \ud83d\ude80\\n- [Abed El Rahman Al Tawil](https://github.com/mrtawil) for your sponsoring and active involvement in addressing issues \ud83d\udc4d\\n\\nYour support and collaboration have strengthened the community and enriched the project. I couldn\'t have come this far without you. Thank you for believing in the mission and helping me create a better environment for React Native development.\\n\\n## Instead of summary\\n\\nThe latest features in `react-native-keyboard-controller` are designed to simplify keyboard interactions and add visual appeal to your React Native applications. Whether you need to ensure your content remains visible when the keyboard is active or want to create stunning animations, this update has got you covered.\\n\\nTo get started, update your package to the latest version of `react-native-keyboard-controller`, and dive into the documentation to see these features in action.\\n\\nI look forward to hearing your feedback and suggestions. Feel free to reach out to me or create GitHub [issues](https://github.com/kirillzyusko/react-native-keyboard-controller/issues) or [discussions](https://github.com/kirillzyusko/react-native-keyboard-controller/discussions). Happy coding!\\n\\nStay tuned for future updates and releases as I continue to enhance the `react-native-keyboard-controller` library. Follow me on [Twitter](https://twitter.com/ziusko) and [GitHub](https://github.com/kirillzyusko) for updates. Your support means the world to me, and if you\'re interested in taking our collaboration to the next level, consider [sponsoring](https://github.com/sponsors/kirillzyusko) me on GitHub \ud83d\ude0a\\n\\nThank you for being part of our community and for your continued support! \ud83d\ude80"},{"id":"set-enabled","metadata":{"permalink":"/react-native-keyboard-controller/blog/set-enabled","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2023-09-28-set-enabled/index.md","source":"@site/blog/2023-09-28-set-enabled/index.md","title":"New setEnabled method","description":"I\'m thrilled to announce the release of react-native-keyboard-controller version 1.8.0. With this latest release, I introduce the useKeyboardController hook and setEnabled method, which allows for a gradual integration of the library into your project, enabling you to disable the module on specific screens as needed. This flexible feature ensures that your app\'s keyboard behavior remains seamless and user-friendly.","date":"2023-09-28T00:00:00.000Z","tags":[{"inline":true,"label":"react-native","permalink":"/react-native-keyboard-controller/blog/tags/react-native"},{"inline":true,"label":"keyboard","permalink":"/react-native-keyboard-controller/blog/tags/keyboard"},{"inline":true,"label":"setEnabled","permalink":"/react-native-keyboard-controller/blog/tags/set-enabled"}],"readingTime":2.27,"hasTruncateMarker":true,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"set-enabled","title":"New setEnabled method","authors":["kirill"],"tags":["react-native","keyboard","setEnabled"],"keywords":["react-native-keyboard-controller","keyboard","setEnabled"]},"unlisted":false,"prevItem":{"title":"New release, new features, achieved milestones","permalink":"/react-native-keyboard-controller/blog/new-features-achieved-milestones"},"nextItem":{"title":"Introducing KeyboardAvoidingView - Elevating Your React Native UI Experience","permalink":"/react-native-keyboard-controller/blog/components"}},"content":"I\'m thrilled to announce the release of `react-native-keyboard-controller` version `1.8.0`. With this latest release, I introduce the `useKeyboardController` hook and `setEnabled` method, which allows for a gradual integration of the library into your project, enabling you to disable the module on specific screens as needed. This flexible feature ensures that your app\'s keyboard behavior remains seamless and user-friendly.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What\'s New in Version 1.8.0: The `setEnabled` Hook\\n\\nThe star feature of `react-native-keyboard-controller` version `1.8.0` is the introduction of the `setEnabled` method. This method provides developers with granular control over when and where the library\'s keyboard management should be active.\\n\\n### How to Use `setEnabled`\\n\\nUsing the `setEnabled` method is incredibly straightforward. Here\'s a quick example of how to integrate it into your React Native project:\\n\\n```tsx\\nimport { useKeyboardController } from \\"react-native-keyboard-controller\\";\\n\\nconst { enabled, setEnabled } = useKeyboardController();\\n\\n// if you want to know whether is module active at the moment\\nconsole.log(enabled);\\n\\n// disable keyboard controller on a specific screen\\nsetEnabled(false);\\n```\\n\\nIn this example, we\'re importing the `useKeyboardController` hook from the `react-native-keyboard-controller` library. This hook returns `setEnabled` method (which you can use to disable keyboard management for a specific screen) and `enabled` variable (indicating whether the module is active now or not).\\n\\nWhen you disable the module using `setEnabled(false)`, the screen will fallback to the default `Android` behavior, automatically resizing based on `AndroidManifest` preferences (`android:windowSoftInputMode`). This level of control allows you to tailor the keyboard experience to your app\'s unique needs on a per-screen basis.\\n\\n### Use Cases for `setEnabled`\\n\\nThe `setEnabled` method is incredibly versatile and can be employed in various scenarios:\\n\\n- **Forms**: Disable keyboard management on screens with simple forms that don\'t require custom keyboard management.\\n\\n- **Chat Interfaces**: Keep keyboard management enabled for chat screens, ensuring smooth and consistent user experiences during messaging interactions.\\n\\n- **Gradual Integration**: Tailor keyboard functionality on specific pages where you require precise control over how the keyboard behaves, while leaving other screens unaffected by these adjustments.\\n\\n## Conclusion\\n\\n`react-native-keyboard-controller` continues to evolve, making it an essential tool for React Native developers who want to provide exceptional user experiences in their mobile apps.\\n\\nWith the introduction of the `setEnabled` method in version `1.8.0`, you now have even more control over keyboard behavior, ensuring that your app feels polished and responsive \ud83d\ude0e\\n\\nTo get started with the latest version, check out the [official documentation](../) and explore the new possibilities that the `setEnabled` method offers.\\n\\nUpgrade your React Native project today and take your keyboard management to the next level with `react-native-keyboard-controller` version `1.8.0`!\\n\\nStay tuned for future updates and releases as I continue to enhance the `react-native-keyboard-controller` library. Follow me on [Twitter](https://twitter.com/ziusko) and [GitHub](https://github.com/kirillzyusko) for updates. Thank you for your support! \ud83d\ude0a"},{"id":"components","metadata":{"permalink":"/react-native-keyboard-controller/blog/components","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2023-09-08-components/index.mdx","source":"@site/blog/2023-09-08-components/index.mdx","title":"Introducing KeyboardAvoidingView - Elevating Your React Native UI Experience","description":"I\'m glad to announce the upcoming release of react-native-keyboard-controller, a library designed to enhance your React Native app\'s user experience. This release marks a significant milestone as I introduce a powerful new feature: the KeyboardAvoidingView. But that\'s not all \u2013 I have exciting plans to expand the collection of pre-built components to simplify handling keyboard insets even further.","date":"2023-09-08T00:00:00.000Z","tags":[{"inline":true,"label":"react-native","permalink":"/react-native-keyboard-controller/blog/tags/react-native"},{"inline":true,"label":"keyboard","permalink":"/react-native-keyboard-controller/blog/tags/keyboard"},{"inline":true,"label":"avoiding view","permalink":"/react-native-keyboard-controller/blog/tags/avoiding-view"}],"readingTime":3.22,"hasTruncateMarker":true,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"components","title":"Introducing KeyboardAvoidingView - Elevating Your React Native UI Experience","authors":["kirill"],"tags":["react-native","keyboard","avoiding view"],"keywords":["react-native-keyboard-controller","keyboard","keyboard avoiding view","avoiding view","KeyboardAvoidingView"]},"unlisted":false,"prevItem":{"title":"New setEnabled method","permalink":"/react-native-keyboard-controller/blog/set-enabled"},"nextItem":{"title":"Enhanced events metadata - say goodbye to guesswork and hello to precision!","permalink":"/react-native-keyboard-controller/blog/enhanced-metadata"}},"content":"I\'m glad to announce the upcoming release of `react-native-keyboard-controller`, a library designed to enhance your React Native app\'s user experience. This release marks a significant milestone as I introduce a powerful new feature: the `KeyboardAvoidingView`. But that\'s not all \u2013 I have exciting plans to expand the collection of pre-built components to simplify handling keyboard insets even further.\\n\\nimport KeyboardAvoidingViewComparison from \\"../../src/components/KeyboardAvoidingViewComparison\\";\\n\\n<KeyboardAvoidingViewComparison />\\n\\n\x3c!-- truncate --\x3e\\n\\n## A Better Way to Handle Keyboard Insets\\n\\nOne of the common challenges React Native developers face is handling the keyboard\'s appearance and disappearance gracefully. It\'s especially important when you want your app to look and feel polished on both `iOS` and `Android` devices. While the built-in `KeyboardAvoidingView` component in React Native works well for `iOS`, it doesn\'t provide the same level of smoothness and consistency on `Android`.\\n\\nI have been hard at work, and in this upcoming release, I\'m thrilled to unveil the enhanced `KeyboardAvoidingView`. With this component, you can achieve a seamless keyboard animation experience across both major platforms \u2013 `iOS` and `Android`.\\n\\n## Features of `KeyboardAvoidingView`\\n\\n### Platform-agnostic Animation\\n\\nWith the new `KeyboardAvoidingView`, you can say goodbye to platform-specific workarounds. This component is designed to work harmoniously on both `iOS` and `Android`, ensuring a consistent user experience throughout your app.\\n\\n### Smoother Animations\\n\\nThe enhanced `KeyboardAvoidingView` offers smoother and more natural animations when the keyboard appears or disappears. This means your UI elements will gracefully adjust to accommodate the keyboard, preventing awkward overlaps and ensuring your users can interact with your app seamlessly.\\n\\n### Backward Compatible and Seamless Integration\\n\\nI understand the importance of maintaining compatibility with existing code bases and providing a smooth transition for React Native developers. With enhanced `KeyboardAvoidingView`, I\'ve put compatibility at the forefront of design principles.\\n\\nThe `KeyboardAvoidingView` is crafted to seamlessly integrate with your existing React Native projects. It\'s a **drop-in** replacement for the default React Native `KeyboardAvoidingView` component. This means that you can start using an enhanced version without the need for extensive code modifications or rewrites.\\n\\nWhether you\'re working on a brand-new project or updating an existing app, making the switch to re-implemented `KeyboardAvoidingView` is as simple as updating your import statements. Your existing codebase remains intact, and the benefits of smoother animations and cross-platform compatibility come without the hassle \ud83d\ude0e\\n\\n### Customizable\\n\\nI believe that the best tools are those that adapt to your unique project requirements. That\'s why I\'m excited to introduce a dedicated avenue for customization. If you find that the default behavior of `KeyboardAvoidingView` doesn\'t precisely align with your app\'s needs, I encourage you to explore the possibilities of customization \ud83e\udd13\\n\\n#### Share Your Ideas and Report Bugs \ud83d\udca1\\n\\nYour feedback is invaluable to me. If you have ideas for new features, improvements, or you encounter any issues while using `KeyboardAvoidingView`, I invite you to get involved. Feel free to submit your suggestions, feature requests, or bug reports through my [GitHub](https://github.com/kirillzyusko/react-native-keyboard-controller) repository.\\n\\nThe community is built on collaboration, and together, I believe we can make this library even better. By actively participating and sharing your insights, you contribute to the growth and enhancement of `react-native-keyboard-controller` and `KeyboardAvoidingView` in a particular.\\n\\n## What\'s Coming Next\\n\\nWhile I\'m excited to introduce the `KeyboardAvoidingView` in this release, my commitment to making your React Native development experience smoother doesn\'t stop here. I have big plans to expand the library with more pre-built components designed to simplify complex tasks related to keyboard handling.\\n\\nIn the pipeline, you can look forward to components like `KeyboardAwareScrollView` for effortlessly managing scroll views, `StickyFooter` for keeping crucial UI elements in view, and much more. My goal is to provide you with a comprehensive toolkit for creating exceptional user interfaces in React Native.\\n\\nStay tuned for future updates and releases as I continue to enhance the `react-native-keyboard-controller` library. Follow me on [Twitter](https://twitter.com/ziusko) and [GitHub](https://github.com/kirillzyusko) for updates. Thank you for your support! \ud83d\ude0a"},{"id":"enhanced-metadata","metadata":{"permalink":"/react-native-keyboard-controller/blog/enhanced-metadata","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2023-08-25-enhanced-metadata/index.mdx","source":"@site/blog/2023-08-25-enhanced-metadata/index.mdx","title":"Enhanced events metadata - say goodbye to guesswork and hello to precision!","description":"I\'m thrilled to unveil the latest upgrade to the react-native-keyboard-controller library - version 1.6.0! This release is all about empowering developers like you with enhanced event metadata, providing you with advanced techniques to take your keyboard handling to the next level.","date":"2023-08-25T00:00:00.000Z","tags":[{"inline":true,"label":"react-native","permalink":"/react-native-keyboard-controller/blog/tags/react-native"},{"inline":true,"label":"keyboard","permalink":"/react-native-keyboard-controller/blog/tags/keyboard"},{"inline":true,"label":"focused text input","permalink":"/react-native-keyboard-controller/blog/tags/focused-text-input"},{"inline":true,"label":"duration","permalink":"/react-native-keyboard-controller/blog/tags/duration"}],"readingTime":2.145,"hasTruncateMarker":true,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"enhanced-metadata","title":"Enhanced events metadata - say goodbye to guesswork and hello to precision!","authors":["kirill"],"tags":["react-native","keyboard","focused text input","duration"],"keywords":["react-native-keyboard-controller","keyboard","duration","focused text input","focused textinput"]},"unlisted":false,"prevItem":{"title":"Introducing KeyboardAvoidingView - Elevating Your React Native UI Experience","permalink":"/react-native-keyboard-controller/blog/components"},"nextItem":{"title":"Interactive keyboard support","permalink":"/react-native-keyboard-controller/blog/interactive-keyboard"}},"content":"I\'m thrilled to unveil the latest upgrade to the `react-native-keyboard-controller` library - version `1.6.0`! This release is all about empowering developers like you with enhanced event metadata, providing you with advanced techniques to take your keyboard handling to the next level.\\n\\nimport Lottie from \\"lottie-react\\";\\nimport lottie from \\"../../src/components/HomepageFeatures/text-inputs.lottie.json\\";\\n\\n<div style={{ display: \\"flex\\", justifyContent: \\"center\\", marginBottom: 20 }}>\\n  <Lottie\\n    className=\\"lottie\\"\\n    animationData={lottie}\\n    style={{ width: 400, height: 400 }}\\n    loop\\n  />\\n</div>\\n\\n**Say goodbye to guesswork and hello to precision!** React Native Keyboard Controller `1.6.0` introduces a trio of new fields in the event metadata that will revolutionize the way you manage keyboard interactions in your React Native applications \ud83d\ude0e\\n\\n\x3c!--truncate--\x3e\\n\\n## Key features\\n\\nBelow you can find a list of key features added in this release \ud83d\ude0a\\n\\n### Timestamp: Sync your animations seamlessly\\n\\nThe addition of the `timestamp` field in the event metadata marks a breakthrough in keyboard handling. Now, you can precisely calculate the delay between an event occurring in the native thread and its propagation to JavaScript. This level of accuracy enables you to orchestrate keyboard handling with finesse, ensuring a seamless and visually pleasing user experience.\\n\\n### Target: Layout mastery at your fingertips\\n\\nUnlock the potential of enhanced layout handling with the `target` field in event metadata. By accessing the view tag of the focused field, you can synchronously retrieve layout information. This newfound capability empowers you to make real-time adjustments to your UI elements based on the active input, creating a fluid and context-aware user interface.\\n\\n### Duration: Elevate animation fluidity\\n\\nExperience the art of animation depth with the `duration` field in event metadata. If you\'re aiming for parallax-like effects without the intricacies of frame-in-frame keyboard animations, this feature is your key! Define the `duration` of the keyboard animation to achieve a captivating parallax effect that adds a touch of elegance to your app\'s visual appeal.\\n\\n## What\'s next?\\n\\nI\'m also excited to share a sneak peek into what\'s on the horizon \ud83d\ude0e\\n\\nDuring the `1.6.0` development cycle, I\'ve delved even deeper into keyboard handling, uncovering insights that will shape the way you interact with keyboards in your React Native apps. So my investigation has inspired a new API that will make keyboard interactions more intuitive and seamless. Whether you\'re a seasoned developer or just starting out, managing keyboards will become a breeze.\\n\\nAlso I will be actively addressing GitHub issues and ensuring compatibility with the latest React Native version. My commitment to excellence means you can rely on a stable and up-to-date library \ud83d\ude0a\\n\\nFollow me on [Twitter](https://twitter.com/ziusko) for updates. Thank you for your support!"},{"id":"interactive-keyboard","metadata":{"permalink":"/react-native-keyboard-controller/blog/interactive-keyboard","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2023-04-10-interactive-keyboard/index.mdx","source":"@site/blog/2023-04-10-interactive-keyboard/index.mdx","title":"Interactive keyboard support","description":"I\'m excited to announce that the upcoming release of react-native-keyboard-controller, version 1.5.0, will include a new feature that allows users to control the position of the keyboard on the screen via gestures. This new interactive keyboard feature will make it easier for users to interact with the keyboard in a more natural and intuitive way, improving the overall user experience of your React Native app.","date":"2023-04-10T00:00:00.000Z","tags":[{"inline":true,"label":"react-native","permalink":"/react-native-keyboard-controller/blog/tags/react-native"},{"inline":true,"label":"keyboard","permalink":"/react-native-keyboard-controller/blog/tags/keyboard"},{"inline":true,"label":"interactive","permalink":"/react-native-keyboard-controller/blog/tags/interactive"},{"inline":true,"label":"android","permalink":"/react-native-keyboard-controller/blog/tags/android"},{"inline":true,"label":"ios","permalink":"/react-native-keyboard-controller/blog/tags/ios"}],"readingTime":1.025,"hasTruncateMarker":true,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"interactive-keyboard","title":"Interactive keyboard support","authors":["kirill"],"tags":["react-native","keyboard","interactive","android","ios"],"keywords":["react-native-keyboard-controller","interactive keyboard","swipe to dismiss keyboard","control keyboard position via gesture"]},"unlisted":false,"prevItem":{"title":"Enhanced events metadata - say goodbye to guesswork and hello to precision!","permalink":"/react-native-keyboard-controller/blog/enhanced-metadata"},"nextItem":{"title":"Version 1.4.0 with new hook","permalink":"/react-native-keyboard-controller/blog/new-hook"}},"content":"I\'m excited to announce that the upcoming release of `react-native-keyboard-controller`, version `1.5.0`, will include a new feature that allows users to control the position of the keyboard on the screen via gestures. This new interactive keyboard feature will make it easier for users to interact with the keyboard in a more natural and intuitive way, improving the overall user experience of your React Native app.\\n\\nimport Lottie from \\"lottie-react\\";\\nimport lottie from \\"../../src/components/HomepageFeatures/interactive.lottie.json\\";\\n\\n<div style={{ display: \\"flex\\", justifyContent: \\"center\\", marginBottom: 20 }}>\\n  <Lottie\\n    className=\\"lottie\\"\\n    animationData={lottie}\\n    style={{ width: 400, height: 400 }}\\n    loop\\n  />\\n</div>\\n\\n\x3c!--truncate--\x3e\\n\\nThe interactive keyboard feature is customizable on Android \ud83e\udd16, allowing developers to define how the gesture controls the keyboard position and how the view should be animated when the keyboard is moved. This new feature is particularly useful for chat and other apps that require precise control over the position of the keyboard. The addition of this new interactive keyboard feature will further enhance the library\'s capabilities and provide a more natural and intuitive user experience.\\n\\nStay tuned for more updates and be sure to check out our documentation for more information on how to use this new feature in your React Native app.\\n\\nThank you for choosing `react-native-keyboard-controller`! \ud83d\ude0a"},{"id":"new-hook","metadata":{"permalink":"/react-native-keyboard-controller/blog/new-hook","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2022-10-15-new-hook/index.md","source":"@site/blog/2022-10-15-new-hook/index.md","title":"Version 1.4.0 with new hook","description":"New 1.4.0 release enhance API and adds new useKeyboardHandler hook. While keeping no breaking changes this release (via new hook) adds an ability to have intermediate values on iOS for height and progress values (before it was not possible and it was a restriction of the library).","date":"2022-10-15T00:00:00.000Z","tags":[{"inline":true,"label":"new hook","permalink":"/react-native-keyboard-controller/blog/tags/new-hook"},{"inline":true,"label":"iOS","permalink":"/react-native-keyboard-controller/blog/tags/i-os"},{"inline":true,"label":"intermediate values","permalink":"/react-native-keyboard-controller/blog/tags/intermediate-values"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"new-hook","title":"Version 1.4.0 with new hook","authors":["kirill"],"tags":["new hook","iOS","intermediate values"],"keyword":["react-native-keyboard-controller","new hook","useKeyboardHandler","low-level","keyboard lifecycle"]},"unlisted":false,"prevItem":{"title":"Interactive keyboard support","permalink":"/react-native-keyboard-controller/blog/interactive-keyboard"},"nextItem":{"title":"Version 1.2.0 with new architecture support","permalink":"/react-native-keyboard-controller/blog/fabric"}},"content":"New 1.4.0 release enhance API and adds new `useKeyboardHandler` hook. While keeping no breaking changes this release (via new hook) adds an ability to have intermediate values on iOS for `height` and `progress` values (before it was not possible and it was a restriction of the library).\\n\\nAlso this hooks allow to track keyboard lifecycle and it\'s better suit for complex animations \ud83d\ude0e\\n\\nCheck out the new documentation for this hook, upgrade library version to `1.4.0` and start using it today!"},{"id":"fabric","metadata":{"permalink":"/react-native-keyboard-controller/blog/fabric","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2022-09-22-fabric/index.md","source":"@site/blog/2022-09-22-fabric/index.md","title":"Version 1.2.0 with new architecture support","description":"I\'m glad to announce, that new upcoming release 1.2.0 brings a support for new react native architecture \ud83d\ude0e","date":"2022-09-22T00:00:00.000Z","tags":[{"inline":true,"label":"react-native","permalink":"/react-native-keyboard-controller/blog/tags/react-native"},{"inline":true,"label":"release","permalink":"/react-native-keyboard-controller/blog/tags/release"},{"inline":true,"label":"new architecture","permalink":"/react-native-keyboard-controller/blog/tags/new-architecture"},{"inline":true,"label":"fabric","permalink":"/react-native-keyboard-controller/blog/tags/fabric"},{"inline":true,"label":"turbo modules","permalink":"/react-native-keyboard-controller/blog/tags/turbo-modules"}],"readingTime":0.875,"hasTruncateMarker":true,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"fabric","title":"Version 1.2.0 with new architecture support","authors":["kirill"],"tags":["react-native","release","new architecture","fabric","turbo modules"],"keywords":["react-native-keyboard-controller","react-native","fabric","new architecture","support"]},"unlisted":false,"prevItem":{"title":"Version 1.4.0 with new hook","permalink":"/react-native-keyboard-controller/blog/new-hook"},"nextItem":{"title":"React Native meets smooth keyboard animations","permalink":"/react-native-keyboard-controller/blog/welcome"}},"content":"I\'m glad to announce, that new upcoming release `1.2.0` brings a support for new react native architecture \ud83d\ude0e\\n\\nFortunately this library is backward compatible with old architecture and will be compiled conditionally depending on which architecture you are using. So don\'t be afraid of updating it to the latest version - it doesn\'t have any breaking changes!\\n\\n<div class=\\"playwright\\">\\n  ![react native logo](./react-native.png#img-thumbnail)\\n</div>\\n\\n\x3c!--truncate--\x3e\\n\\nThe decision to add support for a new architecture (to prioritize a new architecture adoption over other features) was made in order to understand all peculiarities of the new architecture and to discover its possibilities. Hopefully such knowledge can help add new features for the library in the future.\\n\\nObviously, the migration process will take some time for other libraries, so future versions of this library will still support two architectures. When most other open source libraries will be migrated to the new architecture and the new architecture becomes the standard in the react native ecosystem, then support for the old architecture will be removed.\\n\\nStay tuned for future updates! \ud83d\ude0a"},{"id":"welcome","metadata":{"permalink":"/react-native-keyboard-controller/blog/welcome","editUrl":"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2022-06-22-welcome/index.mdx","source":"@site/blog/2022-06-22-welcome/index.mdx","title":"React Native meets smooth keyboard animations","description":"Many flagship applications that are written natively (such as Telegram, Instagram, etc.) use the full power of platform-specific native APIs (iOS, Android) to make transitions between opening/closing the keyboard animated and smooth.","date":"2022-06-22T00:00:00.000Z","tags":[{"inline":true,"label":"react-native","permalink":"/react-native-keyboard-controller/blog/tags/react-native"},{"inline":true,"label":"keyboard","permalink":"/react-native-keyboard-controller/blog/tags/keyboard"},{"inline":true,"label":"animation","permalink":"/react-native-keyboard-controller/blog/tags/animation"}],"readingTime":1.195,"hasTruncateMarker":true,"authors":[{"name":"Kirill Zyusko","title":"Library author","url":"https://github.com/kirillzyusko","imageURL":"https://github.com/kirillzyusko.png","key":"kirill"}],"frontMatter":{"slug":"welcome","title":"React Native meets smooth keyboard animations","authors":["kirill"],"tags":["react-native","keyboard","animation"],"keywords":["react-native-keyboard-controller","react-native","keyboard","animation"]},"unlisted":false,"prevItem":{"title":"Version 1.2.0 with new architecture support","permalink":"/react-native-keyboard-controller/blog/fabric"}},"content":"Many flagship applications that are written natively (such as `Telegram`, `Instagram`, etc.) use the full power of platform-specific native APIs (`iOS`, `Android`) to make transitions between opening/closing the keyboard animated and smooth.\\n\\nUnfortunately, in `react-native` this aspect was given little attention and all `react-native` applications were suffering because of that - animations were rough, you couldn\'t write cross-platform code because some keyboard events were not available, etc. But with the advent of this library, everything changes... \ud83d\ude0e\\n\\nimport Lottie from \\"lottie-react\\";\\nimport lottie from \\"../../src/components/HomepageFeatures/transform.lottie.json\\";\\n\\n<div style={{ display: \\"flex\\", justifyContent: \\"center\\", marginBottom: 20 }}>\\n  <Lottie\\n    className=\\"lottie\\"\\n    animationData={lottie}\\n    style={{ width: 400, height: 400 }}\\n    loop\\n  />\\n</div>\\n\\n\x3c!--truncate--\x3e\\n\\nThe purpose of this library was utilizing all power of native API and at the same time provide a universal way in `react-native` to deal with it (allowing to use some platforms advanced technics if needed). Thus this library allows you to track each keyboard frame movement, and create corresponding reactions (move elements accordingly).\\n\\nThe first release of this library brings missing `keyboardWillShow`/`keyboardWillHide` events on `Android` making `events` module fully cross-platform as well as adding a way to use `Animated.Value` for managing keyboard frames.\\n\\nIn further releases the API will be enhanced:\\n\\n- support will be added for interactive keyboard dismissing (on Android)\\n- the library will be rewritten to new `Fabric` architecture\\n- maybe some components, such as `KeyboardAvoidingView`/`KeyboardAwareScrollView` will be available here with better performance and animations.\\n\\nStay tuned! \ud83d\ude0a"}]}}')}}]);