"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9676],{1805:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=t(4848),r=t(8453);const a={slug:"new-hook",title:"Version 1.4.0 with new hook",authors:["kirill"],tags:["new hook","iOS","intermediate values"],keyword:["react-native-keyboard-controller","new hook","useKeyboardHandler","low-level","keyboard lifecycle"]},i=void 0,l={permalink:"/react-native-keyboard-controller/blog/new-hook",editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2022-10-15-new-hook/index.md",source:"@site/blog/2022-10-15-new-hook/index.md",title:"Version 1.4.0 with new hook",description:"New 1.4.0 release enhance API and adds new useKeyboardHandler hook. While keeping no breaking changes this release (via new hook) adds an ability to have intermediate values on iOS for height and progress values (before it was not possible and it was a restriction of the library).",date:"2022-10-15T00:00:00.000Z",tags:[{inline:!0,label:"new hook",permalink:"/react-native-keyboard-controller/blog/tags/new-hook"},{inline:!0,label:"iOS",permalink:"/react-native-keyboard-controller/blog/tags/i-os"},{inline:!0,label:"intermediate values",permalink:"/react-native-keyboard-controller/blog/tags/intermediate-values"}],readingTime:.405,hasTruncateMarker:!1,authors:[{name:"Kirill Zyusko",title:"Library author",url:"https://github.com/kirillzyusko",imageURL:"https://github.com/kirillzyusko.png",key:"kirill"}],frontMatter:{slug:"new-hook",title:"Version 1.4.0 with new hook",authors:["kirill"],tags:["new hook","iOS","intermediate values"],keyword:["react-native-keyboard-controller","new hook","useKeyboardHandler","low-level","keyboard lifecycle"]},unlisted:!1,prevItem:{title:"Interactive keyboard support",permalink:"/react-native-keyboard-controller/blog/interactive-keyboard"},nextItem:{title:"Version 1.2.0 with new architecture support",permalink:"/react-native-keyboard-controller/blog/fabric"}},s={authorsImageUrls:[void 0]},c=[];function d(e){const o={code:"code",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(o.p,{children:["New 1.4.0 release enhance API and adds new ",(0,n.jsx)(o.code,{children:"useKeyboardHandler"})," hook. While keeping no breaking changes this release (via new hook) adds an ability to have intermediate values on iOS for ",(0,n.jsx)(o.code,{children:"height"})," and ",(0,n.jsx)(o.code,{children:"progress"})," values (before it was not possible and it was a restriction of the library)."]}),"\n",(0,n.jsx)(o.p,{children:"Also this hooks allow to track keyboard lifecycle and it's better suit for complex animations \ud83d\ude0e"}),"\n",(0,n.jsxs)(o.p,{children:["Check out the new documentation for this hook, upgrade library version to ",(0,n.jsx)(o.code,{children:"1.4.0"})," and start using it today!"]})]})}function h(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>i,x:()=>l});var n=t(6540);const r={},a=n.createContext(r);function i(e){const o=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:o},e.children)}}}]);