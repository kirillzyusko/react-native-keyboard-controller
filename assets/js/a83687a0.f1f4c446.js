"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22183],{95092:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=t(74848),a=t(28453);const r={keywords:["react-native-keyboard-controller","useKeyboardState","useKeyboardVisible","useKeyboardIsVisible","useIsKeyboardVisible","useKeyboardHeight","useKeyboard","isOpen","isVisible","react hook"],sidebar_position:4},o="useKeyboardState",i={id:"api/hooks/keyboard/use-keyboard-state",title:"useKeyboardState",description:"useKeyboardState is a hook which gives an access to current keyboard state. This hook combines data from KeyboardController.state() and KeyboardController.isVisible() methods and makes it reactive (i. e. triggers a re-render when keyboard state/visibility has changed).",source:"@site/docs/api/hooks/keyboard/use-keyboard-state.mdx",sourceDirName:"api/hooks/keyboard",slug:"/api/hooks/keyboard/use-keyboard-state",permalink:"/react-native-keyboard-controller/docs/next/api/hooks/keyboard/use-keyboard-state",draft:!1,unlisted:!1,editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/docs/api/hooks/keyboard/use-keyboard-state.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{keywords:["react-native-keyboard-controller","useKeyboardState","useKeyboardVisible","useKeyboardIsVisible","useIsKeyboardVisible","useKeyboardHeight","useKeyboard","isOpen","isVisible","react hook"],sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"useKeyboardHandler",permalink:"/react-native-keyboard-controller/docs/next/api/hooks/keyboard/use-keyboard-handler/"},next:{title:"useFocusedInputHandler",permalink:"/react-native-keyboard-controller/docs/next/api/hooks/input/use-focused-input-handler"}},d={},l=[{value:"Data structure",id:"data-structure",level:2},{value:"\ud83d\udeab Common Pitfalls",id:"-common-pitfalls",level:2},{value:"\u26a0\ufe0f Avoid Unnecessary Re-renders",id:"\ufe0f-avoid-unnecessary-re-renders",level:3},{value:"\u26a1\ufe0f Optimize Animations with Native Threads",id:"\ufe0f-optimize-animations-with-native-threads",level:3},{value:"Example",id:"example",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"usekeyboardstate",children:"useKeyboardState"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"useKeyboardState"})," is a hook which gives an access to current keyboard state. This hook combines data from ",(0,s.jsx)(n.code,{children:"KeyboardController.state()"})," and ",(0,s.jsx)(n.code,{children:"KeyboardController.isVisible()"})," methods and makes it reactive (i. e. triggers a re-render when keyboard state/visibility has changed)."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["Don\u2019t use ",(0,s.jsx)(n.code,{children:"state"})," from ",(0,s.jsx)(n.code,{children:"useKeyboardState"})," inside event handlers. It will cause unnecessary re-renders. See ",(0,s.jsx)(n.a,{href:"#-common-pitfalls",children:"common pitfalls"})," section for more details and alternatives."]})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Make sure that if you want to animate something based on keyboard presence then you've seen ",(0,s.jsx)(n.a,{href:"#%EF%B8%8F-optimize-animations-with-native-threads",children:"optimize animation"})," section."]})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"useKeyboardState"})," allows you to pass a ",(0,s.jsx)(n.strong,{children:"selector"})," function to pick only the necessary part of the keyboard state data. This is a powerful technique to prevent unnecessary re-renders of your component when only a specific property of the keyboard state changes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const appearance = useKeyboardState((state) => state.appearance);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, your component will only re-render when the ",(0,s.jsx)(n.code,{children:"appearance"})," property of the ",(0,s.jsx)(n.code,{children:"KeyboardState"})," changes, rather than for any change in the entire state object."]}),"\n",(0,s.jsx)(n.h2,{id:"data-structure",children:"Data structure"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"KeyboardState"})," is represented by following structure:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type KeyboardState = {\n  isVisible: boolean;\n  height: number;\n  duration: number; // duration of the animation\n  timestamp: number; // timestamp of the event from native thread\n  target: number; // tag of the focused `TextInput`\n  type: string; // `keyboardType` property from focused `TextInput`\n  appearance: string; // `keyboardAppearance` property from focused `TextInput`\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-common-pitfalls",children:"\ud83d\udeab Common Pitfalls"}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-avoid-unnecessary-re-renders",children:"\u26a0\ufe0f Avoid Unnecessary Re-renders"}),"\n",(0,s.jsxs)(n.p,{children:["If you need to access the keyboard ",(0,s.jsx)(n.code,{children:"state"})," in callbacks or event handlers then consider to use ",(0,s.jsx)(n.a,{href:"/react-native-keyboard-controller/docs/next/api/keyboard-controller#state",children:"KeyboardController.state()"})," or ",(0,s.jsx)(n.a,{href:"/react-native-keyboard-controller/docs/next/api/keyboard-controller#isvisible",children:"KeyboardController.isVisible()"})," methods instead. This allows you to retrieve values as needed without triggering unnecessary re-renders."]}),"\n",(0,s.jsxs)("div",{className:"code-grid",children:[(0,s.jsx)("div",{className:"code-block",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="\u2705 Recommended \ud83d\udc4d"',children:"// use KeyboardController.isVisible()\n\n<Button\n  onPress={() => {\n    // \u2705 read value on demand\n    if (KeyboardController.isVisible()) {\n      // ...\n    }\n  }}\n>\n  Go to Next Page\n</Button>\n"})})}),(0,s.jsx)("div",{className:"code-block",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="\u274c Not recommended \ud83d\ude45\u200d\u2642\ufe0f"',children:"const { isVisible } = useKeyboardState();\n\n<Button\n  onPress={() => {\n    // \u274c don't consume state from hook\n    if (isVisible) {\n      // ...\n    }\n  }}\n>\n  Go to next Page\n</Button>;\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-optimize-animations-with-native-threads",children:"\u26a1\ufe0f Optimize Animations with Native Threads"}),"\n",(0,s.jsxs)(n.p,{children:["Don't use ",(0,s.jsx)(n.code,{children:"useKeyboardState"})," for controlling styles, because:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"applying it directly to styles can lead to choppy animations;"}),"\n",(0,s.jsx)(n.li,{children:"it changes its values frequently making excessive re-renders on each keyboard state change."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:['If you need to change styles then you can use "animated" hooks such as ',(0,s.jsx)(n.a,{href:"./use-keyboard-animation",children:"useKeyboardAnimation"}),", ",(0,s.jsx)(n.a,{href:"./use-reanimated-keyboard-animation",children:"useReanimatedKeyboardAnimation"})," or even ",(0,s.jsx)(n.a,{href:"./use-keyboard-handler",children:"useKeyboardHandler"})," to offload animation to a native thread and free up resources for JS thread."]}),"\n",(0,s.jsxs)("div",{className:"code-grid",children:[(0,s.jsx)("div",{className:"code-block",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="\u2705 Recommended \ud83d\udc4d"',children:'const { height } = useKeyboardAnimation();\n\n<Animated.View\n  style={{\n    width: "100%",\n    transform: [{ translateY: height }],\n  }}\n>\n  ...\n</Animated.View>;\n'})})}),(0,s.jsx)("div",{className:"code-block",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="\u274c Not recommended \ud83d\ude45\u200d\u2642\ufe0f"',children:'const { height } = useKeyboardState();\n\n<View\n  style={{\n    width: "100%",\n    transform: [{ translateY: height }],\n  }}\n>\n  ...\n</View>;\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { View, Text, StyleSheet } from "react-native";\nimport { useKeyboardState } from "react-native-keyboard-controller";\n\nconst ShowcaseComponent = () => {\n  const isVisible = useKeyboardState((state) => state.isVisible);\n\n  return isVisible ? (\n    <View style={styles.highlighted}>\n      <Text>Address form</Text>\n    </View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  highlighted: {\n    borderColor: "#0070D8",\n  },\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Also have a look on ",(0,s.jsx)(n.a,{href:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/example",children:"example"})," app for more comprehensive usage."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(96540);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);