<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog</id>
    <title>Keyboard Controller Blog</title>
    <updated>2024-12-12T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog"/>
    <subtitle>Keyboard Controller Blog</subtitle>
    <icon>https://kirillzyusko.github.io/react-native-keyboard-controller/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Mastering keyboard management 🥷🏼]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management"/>
        <updated>2024-12-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Today I'm glad to announce a new 1.15.0 version of react-native-keyboard-controller 🎉]]></summary>
        <content type="html"><![CDATA[<p>Today I'm glad to announce a new <code>1.15.0</code> version of <code>react-native-keyboard-controller</code> 🎉</p>
<p>This release mainly focuses on managing keyboard state, improving keyboard dismissal interactions and API enhancements, so let's go and see which new features this release brings 👇</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changes-to-dismiss-method">Changes to <code>dismiss</code> method<a class="hash-link" aria-label="Direct link to changes-to-dismiss-method" title="Direct link to changes-to-dismiss-method" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#changes-to-dismiss-method">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dismiss-method-now-returns-a-promise"><code>dismiss</code> method now returns a promise<a class="hash-link" aria-label="Direct link to dismiss-method-now-returns-a-promise" title="Direct link to dismiss-method-now-returns-a-promise" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#dismiss-method-now-returns-a-promise">​</a></h3>
<p>Previously, the <code>dismiss</code> method was synchronous, which meant that you couldn't determine the moment when keyboard is fully hidden. Typically many developers were using one time listener that was resolving a promise or executing the code that had to be executed after keyboard dismissal. The code could look like this:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports">  </span><span class="token imports maybe-class-name">KeyboardController</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports">  </span><span class="token imports maybe-class-name">KeyboardEvents</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports"></span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react-native-keyboard-controller"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> subscription </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">KeyboardEvents</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">addListener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"keyboardDidHide"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">setVisible</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  subscription</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token maybe-class-name">KeyboardController</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">dismiss</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, <code>dismiss</code> returns a promise, so you can use it in <code>async</code> way:</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> KeyboardController </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react-native-keyboard-controller"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> KeyboardController</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">dismiss</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">setVisible</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Much cleaner and more readable code! 💪</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dismiss-now-blurs-input-by-default"><code>dismiss</code> now blurs input by default<a class="hash-link" aria-label="Direct link to dismiss-now-blurs-input-by-default" title="Direct link to dismiss-now-blurs-input-by-default" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#dismiss-now-blurs-input-by-default">​</a></h3>
<p>The previous behavior of <code>dismiss</code> was keeping the focus on the input on Android and blurring the input on iOS. This behavior was not very intuitive and such inconsistency could causing a lot of issues. Now, the default behavior is to blur the input on both platforms 😎</p>
<p>Though a rhetorical question might be raised - <strong>"I liked the old behavior, when input still hold the focus 🤷‍♂️. How to restore a previous behavior?"</strong> We hear you! 👇</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dismiss-now-accepts-a-keepfocus-parameter"><code>dismiss</code> now accepts a <code>keepFocus</code> parameter<a class="hash-link" aria-label="Direct link to dismiss-now-accepts-a-keepfocus-parameter" title="Direct link to dismiss-now-accepts-a-keepfocus-parameter" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#dismiss-now-accepts-a-keepfocus-parameter">​</a></h3>
<p>Sometimes you might want to keep the focus on the input, even after keyboard is dismissed. This way users can understand which field was focused the last. If you want to achieve this behavior, you can pass <code>keepFocus</code> parameter to <code>dismiss</code> method:</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">KeyboardController</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">dismiss</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> keepFocus</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-keyboardcontroller-api-methods">New <code>KeyboardController</code> API methods<a class="hash-link" aria-label="Direct link to new-keyboardcontroller-api-methods" title="Direct link to new-keyboardcontroller-api-methods" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#new-keyboardcontroller-api-methods">​</a></h2>
<p>We finished with dismissal part. But the counter part of dismissal is the checking current keyboard state. This release is packed with 2 new methods that aims to simplify the keyboard state checks and achieve a parity with <code>react-native</code> API 😊</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-isvisible-method">New <code>isVisible</code> method<a class="hash-link" aria-label="Direct link to new-isvisible-method" title="Direct link to new-isvisible-method" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#new-isvisible-method">​</a></h3>
<p>This method acts as a <code>Keyboard.isVisible()</code> method from <code>react-native</code> and returns <code>true</code> if keyboard is currently visible and <code>false</code> otherwise.</p>
<p>You can use it to check keyboard visibility on demand without a need to create listeners.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-state-method">New <code>.state()</code> method<a class="hash-link" aria-label="Direct link to new-state-method" title="Direct link to new-state-method" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#new-state-method">​</a></h3>
<p>The new method returns the last keyboard state. It returns <code>null</code> if keyboard was not shown in the app yet.</p>
<p>This method acts similar to <code>Keyboard.metrics()</code> from <code>react-native</code> and returns the current keyboard state. The reason why it is named <code>state</code> instead of <code>metrics</code> is because it returns a different data structure and it's not a drop-in replacement for <code>Keyboard.metrics()</code>. However you can achieve the same results using <code>KeyboardController.state()</code> (because it gives an access to <code>height</code> value) and even more - you can use other properties, such as <code>type</code>, <code>appearance</code>, <code>target</code>, <code>timestamp</code> etc. to get more information about the keyboard.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="better-keyboardstickyview-and-keyboardtoolbar-interoperability">Better <code>KeyboardStickyView</code> and <code>KeyboardToolbar</code> interoperability<a class="hash-link" aria-label="Direct link to better-keyboardstickyview-and-keyboardtoolbar-interoperability" title="Direct link to better-keyboardstickyview-and-keyboardtoolbar-interoperability" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#better-keyboardstickyview-and-keyboardtoolbar-interoperability">​</a></h2>
<p><code>KeyboardStickyView</code> and <code>KeyboardToolbar</code> also got some useful improvements 😊</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keyboardtoolbar-now-accepts-keyboardstickyview-props"><code>KeyboardToolbar</code> now accepts <code>KeyboardStickyView</code> props<a class="hash-link" aria-label="Direct link to keyboardtoolbar-now-accepts-keyboardstickyview-props" title="Direct link to keyboardtoolbar-now-accepts-keyboardstickyview-props" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#keyboardtoolbar-now-accepts-keyboardstickyview-props">​</a></h3>
<p>The <code>KeyboardToolbar</code> is based on <code>KeyboardStickyView</code>. However before it wasn't exposing some of <code>KeyboardStickyView</code> properties.</p>
<p>I fixed that problem and <code>KeyboardToolbar</code> now accepts the same properties that <code>KeyboardStickyView</code> has, thus making a better interoperability between these two components.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keyboardstickyview-got-new-enabled-prop"><code>KeyboardStickyView</code> got new <code>enabled</code> prop<a class="hash-link" aria-label="Direct link to keyboardstickyview-got-new-enabled-prop" title="Direct link to keyboardstickyview-got-new-enabled-prop" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#keyboardstickyview-got-new-enabled-prop">​</a></h3>
<p>Before <code>KeyboardAwareScrollView</code> and <code>KeyboardAvoidingView</code> had <code>enabled</code> property, but somehow I forgot to add that property to <code>KeyboardStickyView</code> 😬. The <code>1.15.0</code> release fixes this problem and now <code>KeyboardStickyView</code> also has <code>enabled</code> property.</p>
<p>When this property is turned on, then <code>KeyboardStickyView</code> follows the keyboard. When property disabled, then it just moves the component into a position as keyboard wasn't shown yet.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="keyboardevents-metadata-enhancements"><code>KeyboardEvents</code> metadata enhancements<a class="hash-link" aria-label="Direct link to keyboardevents-metadata-enhancements" title="Direct link to keyboardevents-metadata-enhancements" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#keyboardevents-metadata-enhancements">​</a></h2>
<p>This release enhances <code>KeyboardEventData</code> with new properties.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-type-property">New <code>type</code> property<a class="hash-link" aria-label="Direct link to new-type-property" title="Direct link to new-type-property" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#new-type-property">​</a></h3>
<p>In this release I added new <code>type</code> property which reflects <a href="https://reactnative.dev/docs/textinput#keyboardtype" target="_blank" rel="noopener noreferrer">keyboardType</a> value. Using this property you can understand more about which keyboard type is shown at the moment.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-appearance-property">New <code>appearance</code> property<a class="hash-link" aria-label="Direct link to new-appearance-property" title="Direct link to new-appearance-property" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#new-appearance-property">​</a></h3>
<p>This release adds a new <code>appearance</code> property which reflects keyboard appearance and can be one of <code>light</code>/<code>dark</code>/<code>default</code> values. This property is available on iOS and Android.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next?<a class="hash-link" aria-label="Direct link to What's next?" title="Direct link to What's next?" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/mastering-keyboard-management#whats-next">​</a></h2>
<p>The main goal of this release was making <code>KeyboardGestureArea</code> available on iOS. I implemented necessary changes in <a href="https://github.com/kirillzyusko/react-native-keyboard-controller/pull/727" target="_blank" rel="noopener noreferrer">this PR</a> (which would allow to use <code>offset</code> property for interactive dismissal). But when I decided to test Fabric I discovered many issues, which basically makes this component unusable on iOS. Since I already merged many PRs that extend library functionality I decided not to pause release process for months and prepare <code>1.15.0</code> now. I'm not abandoning the idea of adding <code>offset</code> to interactive keyboard dismissal. I just think it's not a right time for the release of this feature.</p>
<p>As support timeline for this release I'm planning to resolve some old known issues in the library to be sure this library is bug-free and can be used in various complex applications!</p>
<p>Stay tuned and follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/kirillzyusko" target="_blank" rel="noopener noreferrer">GitHub</a> for updates. Thank you for your support! 😊</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="dismiss" term="dismiss"/>
        <category label="keepFocus" term="keepFocus"/>
        <category label="state" term="state"/>
        <category label="isVisible" term="isVisible"/>
        <category label="type" term="type"/>
        <category label="appearance" term="appearance"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[New OverKeyboardView component]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/over-keyboard-view</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/over-keyboard-view"/>
        <updated>2024-10-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Meet new OverKeyboardView component and corresponding 1.14.0 release! 🎉]]></summary>
        <content type="html"><![CDATA[<p>Meet new <code>OverKeyboardView</code> component and corresponding <code>1.14.0</code> release! 🎉</p>
<!-- -->
<div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px" class="lottie"></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-overkeyboardview">What is <code>OverKeyboardView</code>?<a class="hash-link" aria-label="Direct link to what-is-overkeyboardview" title="Direct link to what-is-overkeyboardview" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/over-keyboard-view#what-is-overkeyboardview">​</a></h2>
<p><code>OverKeyboardView</code> is a new component that allows you to display your content <strong>over</strong> the keyboard. It's a great way to create a <em>modal-like</em> experience with a natural transitions between windows in your application without closing or hiding the keyboard. Say "no" to instant keyboard transitions, jumps, glitches, bouncy UI and other things and use the component that "just works":</p>
<!-- -->
<div style="padding-bottom:20px"><div class="center video"><video autoplay="" loop="" muted="" playsinline="" height="100%" src="/react-native-keyboard-controller/video/over-keyboard-view-shared-transitions.mp4" width="30%"></video></div></div>
<p>This component is perfect for countless applications! Whether you're building a photo gallery app or crafting a custom context menu that floats seamlessly over the screen (keeping the content behind visible while keyboard stays open) - the <code>OverKeyboardView</code> is the solution you've been waiting for!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-use-it">How to use it?<a class="hash-link" aria-label="Direct link to How to use it?" title="Direct link to How to use it?" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/over-keyboard-view#how-to-use-it">​</a></h2>
<p>To use <code>OverKeyboardView</code> you need to wrap your content with it and pass <code>visible</code> prop to it. When <code>visible</code> is <code>true</code> the content will be displayed over the keyboard.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">OverKeyboardView</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react-native-keyboard-controller"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">App</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">visible</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setVisible</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">OverKeyboardView</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">visible</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">visible</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token comment" style="color:#999988;font-style:italic">/* Your content here */</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">OverKeyboardView</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can also check a dedicated <a href="https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/over-keyboard-view">API page</a> to learn more about it.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-else-packed-in-a-new-release">What's else packed in a new release?<a class="hash-link" aria-label="Direct link to What's else packed in a new release?" title="Direct link to What's else packed in a new release?" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/over-keyboard-view#whats-else-packed-in-a-new-release">​</a></h2>
<p>Apart of a new feature this release contains mostly bugfixes that touches an integration aspect, such as:</p>
<ul>
<li><code>KeyboardToolbar</code> can work in <code>Modal</code> on Android (<a href="https://github.com/kirillzyusko/react-native-keyboard-controller/pull/590" target="_blank" rel="noopener noreferrer">#590</a>);</li>
<li><code>KeyboardAwareScrollView</code> can use <code>ScrollView</code> from <code>react-native-gesture-handler</code> (<a href="https://github.com/kirillzyusko/react-native-keyboard-controller/pull/595" target="_blank" rel="noopener noreferrer">#595</a>);</li>
<li><code>OverKeyboardView</code> in invisible state is not hiding <code>ScrollView</code> (<a href="https://github.com/kirillzyusko/react-native-keyboard-controller/pull/598" target="_blank" rel="noopener noreferrer">#598</a>);</li>
<li><code>OverKeyboardView</code> works with <code>GestureDetector</code> on Android (<a href="https://github.com/kirillzyusko/react-native-keyboard-controller/pull/602" target="_blank" rel="noopener noreferrer">#602</a>);</li>
</ul>
<p>Other than that I also improved documentation of the package, update linters and did other various maintenance tasks.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next?<a class="hash-link" aria-label="Direct link to What's next?" title="Direct link to What's next?" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/over-keyboard-view#whats-next">​</a></h2>
<p>I see that the library becomes more and more popular, and next several months I'd like to focus on making stability of this library better. It's already pretty stable and good, but when it comes to the integration in big projects people are encountering some issues and reporting it. So my near-term goal is to improve the stability of the library and make it more stable for everyone.</p>
<p>If you have a pain-points when you have to deal with keyboard in <code>react-native</code> applications, please feel free to contribute to the project by submitting issues or pull requests on GitHub. Let's continue to make <code>react-native-keyboard-controller</code> an essential tool for developers building high-quality mobile applications! 💪</p>
<p>To stay tuned follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/kirillzyusko" target="_blank" rel="noopener noreferrer">GitHub</a> for updates. Thank you for your support! 😊</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="modal" term="modal"/>
        <category label="over keyboard view" term="over keyboard view"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[A new 1.13 release 😎]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13"/>
        <updated>2024-08-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm excited to announce the latest release, version 1.13.0, of react-native-keyboard-controller! 🎉]]></summary>
        <content type="html"><![CDATA[<p>I'm excited to announce the latest release, version <code>1.13.0</code>, of react-native-keyboard-controller! 🎉</p>
<p>This update brings significant improvements and new features to enhance the way your React Native apps handle keyboard interactions. With better support for <code>Modal</code> components, dynamic <code>StatusBar</code> translucency, and new customization options for <code>KeyboardGestureArea</code>s, this release is designed to make your development process smoother and your app's user experience more seamless. 🚀</p>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-features">Key features<a class="hash-link" aria-label="Direct link to Key features" title="Direct link to Key features" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13#key-features">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="modal-support-on-android"><code>Modal</code> support on Android<a class="hash-link" aria-label="Direct link to modal-support-on-android" title="Direct link to modal-support-on-android" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13#modal-support-on-android">​</a></h3>
<p>Starting from the very first version of this library it was impossible to use the functionality of this library inside the <code>Modal</code>. It was caused by next factors:</p>
<ul>
<li>the <code>Modal</code> window lives in its own view hierarchy;</li>
<li><code>react-native</code> set <code>adjustResize</code> mode to <code>window</code> of the <code>Modal</code>.</li>
</ul>
<p>As a result whenever you try to use <code>react-native-keyboard-controller</code> inside the <code>Modal</code> you will get a default behavior (but sometimes even mixed behavior, i. e. hooks will report keyboard height and <code>Modal</code> content will be automatically resized).</p>
<p>As a temporary workaround people simply disabled the module (to fallback to a fully default behavior):</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> useKeyboardController </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react-native-keyboard-controller"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ... somewhere in your modal screen ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> enabled</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setEnabled </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useKeyboardController</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">useEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">setEnabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>While it was working approach it still had some downsides, such as inconsistent keyboard handling/animations across the app.</p>
<p>With the new release it's not a problem anymore - now you can use all hooks and components inside the <code>Modal</code> without additional hassle and it will just work out of the box:</p>
<div class="center video"><video autoplay="" loop="" muted="" playsinline="" height="100%" src="/react-native-keyboard-controller/video/modal-integration-demo.mp4" width="30%"></video></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="support-for-statusbartranslucent">Support for <code>StatusBar.translucent</code><a class="hash-link" aria-label="Direct link to support-for-statusbartranslucent" title="Direct link to support-for-statusbartranslucent" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13#support-for-statusbartranslucent">​</a></h3>
<p>The <code>StatusBar</code> integration was always a problematic because <code>react-native</code> uses deprecated methods that eventually breaks keyboard events. This module exports its own <code>StatusBarManagerCompat</code> module and uses this module automatically to handle <code>StatusBar</code> changes.</p>
<p>The problem was in the fact that <code>StatusBarManagerCompat</code> module didn't react on <code>translucent</code> prop changes. Now it's not the case and you can disable/enable <code>translucent</code> property dynamically.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>You may think that <code>statusBarTranslucent</code> prop on <code>KeyboardProvider</code> is not needed anymore, but I would recommend to keep it - it'll help to layout <code>KeyboardProvider</code> properly in one frame without frame jumps.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-offset-prop-for-keyboardgesturearea">New <code>offset</code> prop for <code>KeyboardGestureArea</code><a class="hash-link" aria-label="Direct link to new-offset-prop-for-keyboardgesturearea" title="Direct link to new-offset-prop-for-keyboardgesturearea" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13#new-offset-prop-for-keyboardgesturearea">​</a></h3>
<p>Starting from this release I'm adding more customization to interactive keyboard handling. On <code>Android</code> now you can add <code>offset</code> property (which can be equal to your <code>TextInput</code> height) to your <code>KeyboardGestureArea</code> component - it'll allow you to extend the keyboard area and start dismiss gesture starting from the <code>TextInput</code> top border and not from the keyboard itself.</p>
<!-- -->
<table><tbody><tr style="border:none"><td style="border:none"><div class="center video"><video autoplay="" loop="" muted="" playsinline="" height="100%" src="/react-native-keyboard-controller/video/keyboard-gesture-area-without-offset.mp4" width="65%"></video></div></td><td style="border:none"><div class="center video"><video autoplay="" loop="" muted="" playsinline="" height="100%" src="/react-native-keyboard-controller/video/keyboard-gesture-area-with-offset.mp4" width="65%"></video></div></td></tr><tr style="border:none;background-color:#00000000"><td style="border:none;max-width:400px;text-align:center"><i>The keyboard movement starts only when you cross the top border of the keyboard</i></td><td style="border:none;max-width:400px;text-align:center"><i>The keyboard movement starts only when you cross the top border of your<!-- --> <code>TextInput</code></i></td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="react-native075-support"><code>react-native@0.75</code> support<a class="hash-link" aria-label="Direct link to react-native075-support" title="Direct link to react-native075-support" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13#react-native075-support">​</a></h3>
<p>This release brings support for <code>react-native@0.75</code>. Even though <code>1.12.x</code> should be also compatible with <code>react-native@0.75</code> I still would recommend you to update this library to <code>1.13.0</code> if you are running your project on <code>react-native@0.75</code> (especially if you are using new architecture).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="an-ability-to-prevent-default-actions-in-keyboardtoolbar">An ability to prevent default actions in <code>KeyboardToolbar</code><a class="hash-link" aria-label="Direct link to an-ability-to-prevent-default-actions-in-keyboardtoolbar" title="Direct link to an-ability-to-prevent-default-actions-in-keyboardtoolbar" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13#an-ability-to-prevent-default-actions-in-keyboardtoolbar">​</a></h3>
<p>Starting from <code>1.12.0</code> you had an ability to customize the behavior of <code>KeyboardToolbar</code> buttons - you could run additional actions (add haptic feedback, for example). However before it wasn't possible to prevent default actions from happening, i. e. if you pressed next button, then focus would move to the next input.</p>
<p>With this release you can prevent default actions from happening by calling <code>e.preventDefault()</code> in <code>onNextCallback</code>, <code>onPrevCallback</code>, and <code>onDoneCallback</code> callbacks.</p>
<p>I think it's a great addition to the existing functionality, because sometimes you may need to have this. For example, if you have a custom input between two <code>TextInput</code>s (let's say a calendar picker) and when you press the next button (while you have a focus on the first input) - most likely you want to open a calendar picker. But with default behavior you will skip a calendar picker and will instantly move to the second input. Using new functionality you can call <code>e.preventDefault()</code> conditionally and perform your own action to achieve your custom requirements!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="synchronous-worklet-handler-mount">Synchronous <code>worklet</code> handler mount<a class="hash-link" aria-label="Direct link to synchronous-worklet-handler-mount" title="Direct link to synchronous-worklet-handler-mount" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13#synchronous-worklet-handler-mount">​</a></h3>
<p>Hooks such as <code>useKeyboardHandler</code> or <code>useFocusedInputHandler</code> were mounting <code>worklet</code> handlers asynchronously. In most of the cases it wasn't a problem, but if the keyboard performs an animation and <code>worklet</code> handler is not attached yet, then you will get a broken layout - keyboard will overlap elements etc.</p>
<p>This release fixes this issue by mounting <code>worklet</code> handlers synchronously so it's not a problem anymore! 😊</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="other-bug-fixes-and-improvements">Other bug fixes and improvements<a class="hash-link" aria-label="Direct link to Other bug fixes and improvements" title="Direct link to Other bug fixes and improvements" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13#other-bug-fixes-and-improvements">​</a></h3>
<p>Among all other improvements this release also includes a bunch of fixes, such as:</p>
<ul>
<li>proper <code>ref</code> de-allocation for <code>KeyboardAwareScrollView</code>;</li>
<li>better accessibility labels for <code>KeyboardToolbar</code>;</li>
<li>incorrect <code>height</code>/<code>progress</code> values in <code>onEnd</code>/<code>didShow</code> events on iOS when keyboard appearance has two stages (i. e. you are using <code>secureTextEntry</code> prop on <code>TextInput</code>).</li>
</ul>
<p>Also this release aims to improve the stability of this library - I added a bunch of <strong>e2e</strong> tests and added scripts for running them on more devices. If before I used only <strong>iOS 17</strong> simulator and <strong>Android 9</strong> emulator, now I'm using <strong>iOS 16/17/18</strong> (yes, I'm testing on <em><strong>beta</strong></em> iOS releases too 😎) simulators and <strong>Android 9/12</strong> emulators.</p>
<p>I hope such setup can help to catch bugs on as early stage as possible. But I'm not going to stop here - I'm also planning to add more tests, more runtimes (Android 15 is planned) and improve the stability of this library even more.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next?<a class="hash-link" aria-label="Direct link to What's next?" title="Direct link to What's next?" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-13#whats-next">​</a></h2>
<p>The new <code>1.13.0</code> release is just a better revision of the <code>1.12.0</code> release. But since it brings quite a lot of new features and improvements I decided to publish it as a separate release. 👀</p>
<p>I'm planning to continuously improve this library and add more features. The ultimate goal is to fix all the bugs and implement all requested features. 😎</p>
<p>If you have a pain-points when you have to deal with keyboard in <code>react-native</code> applications, please feel free to contribute to the project by submitting issues or pull requests on GitHub. Let's continue to make <code>react-native-keyboard-controller</code> an essential tool for developers building high-quality mobile applications! 💪</p>
<p>To stay tuned follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/kirillzyusko" target="_blank" rel="noopener noreferrer">GitHub</a> for updates. Thank you for your support! 😊</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="modal" term="modal"/>
        <category label="translucent status bar" term="translucent status bar"/>
        <category label="offset" term="offset"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing upcoming release 📣]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-12</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-12"/>
        <updated>2024-05-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm excited to announce the latest release, version 1.12.0, of react-native-keyboard-controller!]]></summary>
        <content type="html"><![CDATA[<p>I'm excited to announce the latest release, version 1.12.0, of react-native-keyboard-controller!</p>
<p>Although this release may not seem monumental, it's significant, and I'm thrilled to share it with you. 😍</p>
<p>The key features of this release are: <strong>bridgeless</strong> support, selection tracking, enhanced <code>KeyboardToolbar</code> component and synchronous <code>onMove</code> handler on iOS among other bug fixes and improvements.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bridgeless-support">Bridgeless support<a class="hash-link" aria-label="Direct link to Bridgeless support" title="Direct link to Bridgeless support" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-12#bridgeless-support">​</a></h2>
<p>This library starting from <code>1.12.0</code> is now compatible RN 0.74 and fully supports bridgeless mode, offering improved performance and streamlined communication between native and JavaScript layers.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="selection-tracking">Selection tracking<a class="hash-link" aria-label="Direct link to Selection tracking" title="Direct link to Selection tracking" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-12#selection-tracking">​</a></h2>
<p>In the previous version, <code>react-native-keyboard-controller</code> was not able to track selection changes in the text input fields. Starting from <code>1.12.0</code> this library exposes a new event and handlers making it possible to track selection changes.</p>
<p>In addition to duplicating the react-native API, this event provides information not only about the <code>start</code> and <code>end</code> positions but also the <code>x</code> and <code>y</code> coordinates for the top-left and bottom-right corners of the selection.</p>
<p>These details allow you to draw elements behind the cursor, making interaction with focused inputs more intuitive:</p>
<!-- -->
<div class="center video"><video autoplay="" loop="" muted="" playsinline="" height="100%" src="/react-native-keyboard-controller/video/selection-demo.mov" width="65%"></video></div>
<br>
<p>Later on I'm planning to extend <code>KeyboardAwareScrollView</code> to react on selection tracking, so if your selection is overlapped with keyboard then <code>KeyboardAwareScrollView</code> will automatically scroll and avoid an overlap.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="keyboardtoolbar-enhancements"><code>KeyboardToolbar</code> enhancements<a class="hash-link" aria-label="Direct link to keyboardtoolbar-enhancements" title="Direct link to keyboardtoolbar-enhancements" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-12#keyboardtoolbar-enhancements">​</a></h2>
<p>The <code>KeyboardToolbar</code> component was initially introduced in version <code>1.10.0</code>. In this release, I've added new features to make it even more customizable and HID compatible.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="blur-effect"><code>blur</code> effect<a class="hash-link" aria-label="Direct link to blur-effect" title="Direct link to blur-effect" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-12#blur-effect">​</a></h3>
<p>Starting with version <code>1.12.0</code>, you can apply a blur effect to the <code>KeyboardToolbar</code> component by using the <code>blur</code> prop. You can use any compatible component, such as <code>react-native-blur</code> or <code>expo-blur</code>. Since iOS 16, the keyboard itself is translucent with a blur effect, which causes all components behind it to be blurred too.</p>
<p>With the new version of <code>react-native-keyboard-controller</code>, you can extend this effect to the <code>KeyboardToolbar</code> component! 😎</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="button-callbacks">Button callbacks<a class="hash-link" aria-label="Direct link to Button callbacks" title="Direct link to Button callbacks" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-12#button-callbacks">​</a></h3>
<p>From version <code>1.12.0</code>, the <code>KeyboardToolbar</code> component supports various callbacks for specific events, such as <code>onNextCallback</code>, <code>onPrevCallback</code>, and <code>onDoneCallback</code>.</p>
<p>These callbacks let you add <strong>haptic</strong> feedback, <strong>play sounds</strong>, or implement other creative responses based on your needs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="synchronous-onmove-handler-on-ios">Synchronous <code>onMove</code> handler on iOS<a class="hash-link" aria-label="Direct link to synchronous-onmove-handler-on-ios" title="Direct link to synchronous-onmove-handler-on-ios" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-12#synchronous-onmove-handler-on-ios">​</a></h2>
<p>Since version <code>1.4.0</code>, when the <code>useKeyboardHandler</code> hook was introduced, the <code>onMove</code> handler was always a frame behind.</p>
<p>As a result, it created a parallax effect that prevented elements from precisely following the keyboard.</p>
<p>With a new release this problem is solved, and the <code>onMove</code> handler is now synchronized with the keyboard animation. 😊</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="no-need-to-patch-react-native-text-input-mask-anymore">No need to patch <code>react-native-text-input-mask</code> anymore<a class="hash-link" aria-label="Direct link to no-need-to-patch-react-native-text-input-mask-anymore" title="Direct link to no-need-to-patch-react-native-text-input-mask-anymore" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-12#no-need-to-patch-react-native-text-input-mask-anymore">​</a></h2>
<p>If you used <code>react-native-text-input-mask</code> alongside <code>useFocusedInputHandler</code> or <code>KeyboardAwareScrollView</code>, you might have needed to patch it to ensure that the <code>onChangeText</code> event was triggered.</p>
<p>With the new release of <code>react-native-keyboard-controller</code>, you can now safely remove this patch and keep your existing code intact. 👍</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next?<a class="hash-link" aria-label="Direct link to What's next?" title="Direct link to What's next?" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-12#whats-next">​</a></h2>
<p>This release refines the previous version and at the same time introduces crucial improvements that will unlock the full potential of <code>react-native-keyboard-controller</code> in future updates:</p>
<ul>
<li>on iOS, we now inject a delegate into <code>TextInput</code>, providing greater control over input and keyboard events;</li>
<li>the fully synchronous <code>onMove</code> handler will enable frame-by-frame keyboard control in the future, particularly when an interactive keyboard offset is implemented. 👀</li>
</ul>
<p>To stay tuned follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/kirillzyusko" target="_blank" rel="noopener noreferrer">GitHub</a> for updates. Thank you for your support! 😊</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="bridgeless" term="bridgeless"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[New KeyboardToolbar component 😍]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/keyboard-toolbar</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/keyboard-toolbar"/>
        <updated>2024-02-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm glad to announce a groundbreaking feature that's set to transform the way users interact with keyboards in your app: the KeyboardToolbar. This feature will enhance typing efficiency and increase user satisfaction. 😎]]></summary>
        <content type="html"><![CDATA[<p>I'm glad to announce a groundbreaking feature that's set to transform the way users interact with keyboards in your app: the <code>KeyboardToolbar</code>. This feature will enhance typing efficiency and increase user satisfaction. 😎</p>
<!-- -->
<div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px" class="lottie"></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-keyboardtoolbar">Why <code>KeyboardToolbar</code>?<a class="hash-link" aria-label="Direct link to why-keyboardtoolbar" title="Direct link to why-keyboardtoolbar" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/keyboard-toolbar#why-keyboardtoolbar">​</a></h2>
<p>In the digital age, the keyboard is not just a tool; it's the gateway to communication, creativity, and connection. Recognizing this, I set out to redefine the keyboard experience, making it more intuitive, seamless, and, most importantly, tailored to your users needs. So I'm happy to reveal <code>KeyboardToolbar</code> - a sleek, customizable toolbar that sticks to your keyboard like a faithful companion, ready to streamline your typing journey. 😍</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-do-i-need-another-toolbar-component-if-react-native-keyboard-manager-already-provides-an-implementation">Why do I need another toolbar component if <code>react-native-keyboard-manager</code> already provides an implementation?<a class="hash-link" aria-label="Direct link to why-do-i-need-another-toolbar-component-if-react-native-keyboard-manager-already-provides-an-implementation" title="Direct link to why-do-i-need-another-toolbar-component-if-react-native-keyboard-manager-already-provides-an-implementation" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/keyboard-toolbar#why-do-i-need-another-toolbar-component-if-react-native-keyboard-manager-already-provides-an-implementation">​</a></h2>
<p>While <code>react-native-keyboard-manager</code> offers a toolbar component powered by <code>IQKeyboardManager</code>, it still lack some features, such as:</p>
<ul>
<li>missing Android support;</li>
<li>lack of full customization (you can not render custom content/buttons/icons, perform custom actions on clicks, etc.);</li>
<li>issues when integrating custom input components (date pickers, bottom sheets, etc.).</li>
</ul>
<p>Taking all these points into consideration, I decided to create a <strong>new</strong> component that would overcome these limitations, while at the same time maintaining a simple API so that developers can easily work with it.</p>
<p>I was inspired by <code>IQKeyboardManager</code> functionality and its ease of integration into iOS projects, so I decided to replicate their algorithms for view traversal on both Android and iOS.</p>
<p>For sure, the current implementation only covers basic use cases, but I plan to extend the functionality to cover more and more various edge cases in the future. 😎</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-simple-api-behind-a-new-component">The simple API behind a new component<a class="hash-link" aria-label="Direct link to The simple API behind a new component" title="Direct link to The simple API behind a new component" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/keyboard-toolbar#the-simple-api-behind-a-new-component">​</a></h2>
<p>The UI of the new component is implemented using <code>react-native</code> primitives (thus allowing great customization). However, the functionality for moving focus to <code>next</code> and <code>previous</code> fields is implemented on the native side and is powered by a simple API:</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> KeyboardController </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react-native-keyboard-controller"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// this will move focus to the next TextInput</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">KeyboardController</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setFocusTo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"next"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// or if we want to set focus to previous field</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">KeyboardController</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setFocusTo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"prev"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Last but not least - the new API allows you to restore focus to the last focused input 🤯. To achieve this, you should use:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">KeyboardController</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react-native-keyboard-controller"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// if keyboard is closed - it'll restore a focus</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// if keyboard is open - it will not do anything</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token maybe-class-name">KeyboardController</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">setFocusTo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"current"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So, as you can see, for simple navigation to <code>next</code> and <code>previous</code> fields, you don't need to create a complex solutions with an array of <code>refs</code> in JS code - now it's powered by the new API of this library and allows you to delegate control to the library and simplify your codebase 😎</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="instead-of-summary">Instead of summary<a class="hash-link" aria-label="Direct link to Instead of summary" title="Direct link to Instead of summary" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/keyboard-toolbar#instead-of-summary">​</a></h2>
<p>As I roll out the <code>KeyboardToolbar</code>, I invite you to join me in this exciting journey. Elevate your app's user experience, redefine keyboard interaction, and watch as your users engage with your app in ways never imagined before. Stay tuned for more updates, and get ready to embrace the future of keyboard navigation.</p>
<p>To start to use this feature install the latest <code>react-native-keyboard-controller</code> version <code>1.11.0</code> and add this component into your app. 😎 Also don't forget to check <a href="https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/example" target="_blank" rel="noopener noreferrer">example</a> app to see how it's implemented there 👀</p>
<p>Follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/kirillzyusko" target="_blank" rel="noopener noreferrer">GitHub</a> for updates. Thank you for your support! 😊</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="keyboard toolbar" term="keyboard toolbar"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[New release features, a year overview]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10"/>
        <updated>2023-12-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm thrilled to announce the latest release, version 1.10.0, of react-native-keyboard-controller! Packed with new functionalities and improvements, this update aims to enhance your React Native development experience.]]></summary>
        <content type="html"><![CDATA[<p>I'm thrilled to announce the latest release, version <code>1.10.0</code>, of <code>react-native-keyboard-controller</code>! Packed with new functionalities and improvements, this update aims to enhance your React Native development experience.</p>
<!-- -->
<div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px" class="lottie"></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-features">Key features<a class="hash-link" aria-label="Direct link to Key features" title="Direct link to Key features" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10#key-features">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="usefocusedinputhandler-hook"><code>useFocusedInputHandler</code> hook<a class="hash-link" aria-label="Direct link to usefocusedinputhandler-hook" title="Direct link to usefocusedinputhandler-hook" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10#usefocusedinputhandler-hook">​</a></h3>
<p>Introducing the <code>useFocusedInputHandler</code> hook! This powerful addition empowers developers to manage focused input with unparalleled ease. The hook comes with a straightforward signature:</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">useFocusedInputHandler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function-variable function" style="color:#d73a49">onChangeText</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> text </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token string" style="color:#e3116c">"worklet"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Your custom logic here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Whenever you are building your own avoiding solution or tracking user activity this hook can be a perfect fit for your needs!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="exporting-keyboardawarescrollview">Exporting <code>KeyboardAwareScrollView</code><a class="hash-link" aria-label="Direct link to exporting-keyboardawarescrollview" title="Direct link to exporting-keyboardawarescrollview" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10#exporting-keyboardawarescrollview">​</a></h3>
<p>I've heard your feedback, and in response, I'm now exporting <code>KeyboardAwareScrollView</code> from the library core. This widely-used component provides an enhanced <code>ScrollView</code> experience, ensuring smoother navigation and improved user interactions. Now, you can effortlessly integrate it into your projects and leverage its capabilities for a more polished UI 😎</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keyboardcontrollerdismiss-method"><code>KeyboardController.dismiss()</code> method<a class="hash-link" aria-label="Direct link to keyboardcontrollerdismiss-method" title="Direct link to keyboardcontrollerdismiss-method" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10#keyboardcontrollerdismiss-method">​</a></h3>
<p>Simplify your workflow with the addition of the <code>KeyboardController.dismiss()</code> method. This method streamlines the dismissal of the keyboard, making it a breeze to manage user input interactions. Enhance the user experience by effortlessly controlling when and how the keyboard should disappear.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reflecting-on-a-productive-year-2023-">Reflecting on a Productive Year: 2023 🎁🎅<a class="hash-link" aria-label="Direct link to Reflecting on a Productive Year: 2023 🎁🎅" title="Direct link to Reflecting on a Productive Year: 2023 🎁🎅" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10#reflecting-on-a-productive-year-2023-">​</a></h2>
<p>As we bid farewell to 2023, it's a moment to reflect on the incredible strides we've made together. This year has been marked by innovation, user-centric enhancements, and the continuous evolution of our toolkit. Here's a summary of the key milestones:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="interactive-keyboard-implementation">Interactive Keyboard Implementation<a class="hash-link" aria-label="Direct link to Interactive Keyboard Implementation" title="Direct link to Interactive Keyboard Implementation" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10#interactive-keyboard-implementation">​</a></h3>
<p>I took a giant leap forward by implementing an interactive keyboard. This feature enhances user engagement and provides a dynamic interface for a more immersive experience. Now, user interactions with the keyboard are not just functional but also interactive and enjoyable 😊</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="expanded-event-metadata">Expanded Event Metadata<a class="hash-link" aria-label="Direct link to Expanded Event Metadata" title="Direct link to Expanded Event Metadata" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10#expanded-event-metadata">​</a></h3>
<p>In response to your needs, I introduced new metadata fields — <code>duration</code>, <code>target</code> and <code>timestamp</code> — to events. These additions provide more comprehensive insights into user interactions, enabling you to fine-tune and optimize your applications with a deeper understanding of user behavior.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="diverse-component-additions">Diverse Component Additions<a class="hash-link" aria-label="Direct link to Diverse Component Additions" title="Direct link to Diverse Component Additions" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10#diverse-component-additions">​</a></h3>
<p>My commitment to versatility led to the incorporation of several new components. The introduction of <code>KeyboardAvoidingView</code>, <code>KeyboardStickyFooter</code>, and <code>KeyboardAwareScrollView</code> opens up a world of possibilities for crafting responsive and user-friendly interfaces. These components are designed to seamlessly integrate into your projects, offering enhanced UI control.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="empowering-hooks">Empowering Hooks<a class="hash-link" aria-label="Direct link to Empowering Hooks" title="Direct link to Empowering Hooks" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10#empowering-hooks">​</a></h3>
<p>Empowering developers with more tools, I introduced a series of new hooks. From the versatile <code>useKeyboardController</code> to the focused input management provided by <code>useReanimatedFocusedInput</code> and the feature-rich <code>useFocusedInputHandler</code> hook, these additions streamline development and elevate the capabilities of your React Native applications.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="looking-forward-to-2024-️️">Looking Forward to 2024 ☃️🎄❄️<a class="hash-link" aria-label="Direct link to Looking Forward to 2024 ☃️🎄❄️" title="Direct link to Looking Forward to 2024 ☃️🎄❄️" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/release-1-10#looking-forward-to-2024-%EF%B8%8F%EF%B8%8F">​</a></h2>
<p>As I embark on the journey into the new year, the excitement is palpable. I'm eager to build upon the successes of 2023 and bring even more features to the table. Our roadmap is filled with promising enhancements, and I can't wait to share them with you. Your feedback has been invaluable, and I look forward to continuing this collaborative journey in the coming year.</p>
<p>Thank you for being a part of our community. Here's to a year of growth, collaboration, and the continued evolution of your React Native development experience!</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="focused text input" term="focused text input"/>
        <category label="keyboard aware scroll view" term="keyboard aware scroll view"/>
        <category label="dismiss" term="dismiss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[New release, new features, achieved milestones]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-features-achieved-milestones</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-features-achieved-milestones"/>
        <updated>2023-11-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this blog post I'd like to make an overview of new features available in 1.9.0 as well as going through the big milestones that were achieved 😎]]></summary>
        <content type="html"><![CDATA[<p>In this blog post I'd like to make an overview of new features available in <code>1.9.0</code> as well as going through the big milestones that were achieved 😎</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-the-new-features-in-react-native-keyboard-controller">Introducing the New Features in react-native-keyboard-controller<a class="hash-link" aria-label="Direct link to Introducing the New Features in react-native-keyboard-controller" title="Direct link to Introducing the New Features in react-native-keyboard-controller" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-features-achieved-milestones#introducing-the-new-features-in-react-native-keyboard-controller">​</a></h2>
<p>I'm excited to announce the latest release of <code>react-native-keyboard-controller</code>! This update brings two powerful new features to help you manage the keyboard behavior in your React Native applications. Whether you're building a simple form or a complex UI, these additions will make your life easier 😎</p>
<!-- -->
<div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px" class="lottie"></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="keyboardstickyview"><code>KeyboardStickyView</code><a class="hash-link" aria-label="Direct link to keyboardstickyview" title="Direct link to keyboardstickyview" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-features-achieved-milestones#keyboardstickyview">​</a></h3>
<p><code>KeyboardStickyView</code> is a new component that simplifies handling keyboard interactions in your React Native applications. With this component, you can easily ensure that the content inside remains visible, accessible and is sticky to the keyboard movement. Here are some of the key features:</p>
<ul>
<li><strong>Auto-Adjustment</strong>: The <code>KeyboardStickyView</code> automatically adjusts the position of your UI components when the keyboard is displayed, ensuring that your content inside a container remains visible.</li>
<li><strong>Customizable Behavior</strong>: You have full control over how the UI adjusts when the keyboard is shown or hidden. You can specify <code>offset</code> property and it'll automatically interpolate values based on keyboard animation to make the transition seamless.</li>
<li><strong>Universal Compatibility</strong>: Whether your users are on Android or iOS, <code>KeyboardStickyView</code> ensures that your content remains accessible and visible, even when the keyboard appears. No more platform-specific quirks; it just works.</li>
<li><strong>Custom Content</strong>: The flexibility of <code>KeyboardStickyView</code> shines as you can place any content inside it. It's perfect for multi-step flows, chats, or any scenario where you need buttons and widgets to remain easily accessible when the keyboard is up.</li>
<li><strong>Effortless Integration</strong>: Implementing <code>KeyboardStickyView</code> in your app is a breeze. Just wrap your UI elements within this component, and it takes care of the rest. It automatically adjusts the position of your UI components as the keyboard is shown or hidden.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="usereanimatedfocusedinput-hook"><code>useReanimatedFocusedInput</code> hook<a class="hash-link" aria-label="Direct link to usereanimatedfocusedinput-hook" title="Direct link to usereanimatedfocusedinput-hook" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-features-achieved-milestones#usereanimatedfocusedinput-hook">​</a></h3>
<p>This hook represents a significant evolution from the features introduced in the <code>1.6.0</code> release. In <code>1.6.0</code>, a new <code>target</code> property was introduced to fetch the layout of the currently focused <code>TextInput</code>. While it served its purpose, it came with a set of challenges:</p>
<ul>
<li><strong>Complex Setup on Fabric Architecture</strong>: Setting up this feature on the new Fabric architecture posed complications, including the use of deprecated APIs like <code>findNodeHandle</code>.</li>
<li><strong>Inconsistencies Across Architectures</strong>: The measurements could sometimes yield different results depending on the underlying architecture in use.</li>
<li><strong>Inability to Detect Layout Changes</strong>: It lacked the ability to detect layout changes for the focused <code>TextInput</code> within the library's ecosystem.</li>
</ul>
<p>Considering these challenges, the decision was made to enhance the library's capabilities and introduce a new hook that simplifies interactions with the API while addressing the issues mentioned above. And thus, I present to you...🥁</p>
<p>The new <code>useReanimatedFocusedInput</code> hook 😎. This hook eliminates the need for integrating or using third-party elements, ensuring consistent functionality across all platforms and architectures. Its standout feature is its ability to detect events crucial for building robust keyboard handling, even beyond direct keyboard interactions, such as the detection of layout changes.</p>
<p>With <code>useReanimatedFocusedInput</code>, I've created a more streamlined and versatile solution to meet your needs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="achieved-milestones">Achieved milestones<a class="hash-link" aria-label="Direct link to Achieved milestones" title="Direct link to Achieved milestones" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-features-achieved-milestones#achieved-milestones">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-celebrating-1000-stars-a-heartfelt-thank-you-to-our-incredible-community-">🎉 Celebrating 1000 Stars: A Heartfelt Thank You to Our Incredible Community 🌟<a class="hash-link" aria-label="Direct link to 🎉 Celebrating 1000 Stars: A Heartfelt Thank You to Our Incredible Community 🌟" title="Direct link to 🎉 Celebrating 1000 Stars: A Heartfelt Thank You to Our Incredible Community 🌟" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-features-achieved-milestones#-celebrating-1000-stars-a-heartfelt-thank-you-to-our-incredible-community-">​</a></h3>
<p>The <code>react-native-keyboard-controller</code> has reached an incredible milestone - <strong>1000</strong> stars! 🚀 This achievement wouldn't have been possible without the unwavering support and contributions from amazing community of developers and enthusiasts.</p>
<p>I want to take a moment to express my deepest gratitude to each and every one of you who has been a part of this journey. Your support, engagement, and feedback have played a crucial role in shaping this project and making it what it is today.</p>
<p>Thank You for:</p>
<p>🙌 <strong>Star Power</strong>: Your stars show your endorsement and appreciation for my work. Each star represents a vote of confidence and encouragement.</p>
<p>💬 <strong>Engaging Feedback</strong>: Your questions, suggestions, and issues have helped me improve the library and make it more robust. Your thoughtful feedback is invaluable.</p>
<p>👩‍💻 <strong>Contributions</strong>: Many of you have contributed your time and expertise to enhance the project. Your code, documentation updates, and bug reports have been a driving force behind my progress.</p>
<p>🌐 <strong>Spreading the Word</strong>: Sharing the project within your networks has helped me grow and reach a wider audience. Your support has a ripple effect.</p>
<p>🤝 Community Spirit: Your active participation in discussions, forums, and events related to the library creates a sense of unity and shared purpose.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-8000-weekly-downloads-on-npm">📈 8.000 weekly downloads on npm<a class="hash-link" aria-label="Direct link to 📈 8.000 weekly downloads on npm" title="Direct link to 📈 8.000 weekly downloads on npm" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-features-achieved-milestones#-8000-weekly-downloads-on-npm">​</a></h3>
<p>While <strong>8.000</strong> weekly downloads on npm is undoubtedly a milestone to celebrate, I want to take a moment to express my heartfelt appreciation to every single user of <code>react-native-keyboard-controller</code>. Whether you've been with me from the beginning or you've just started using the library, your trust and support mean a lot for me.</p>
<p>It's not about the size of the number; it's about the impact each one of you makes in your own unique way. Every user is an integral part of the growing community, contributing to the success and development of the project. Your feedback, your questions, your ideas, and your trust are what keep me inspired and motivated!</p>
<p>So, thank you. Thank you for choosing <code>react-native-keyboard-controller</code> for your applications. Your faith in the library drives me to continually improve, innovate, and provide you with the best tools for your React Native projects.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="special-thank-you-️">Special Thank You ❤️<a class="hash-link" aria-label="Direct link to Special Thank You ❤️" title="Direct link to Special Thank You ❤️" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-features-achieved-milestones#special-thank-you-%EF%B8%8F">​</a></h3>
<p>Especially I want to make a huge shoot out to:</p>
<ul>
<li><a href="https://github.com/hirbod" target="_blank" rel="noopener noreferrer">Hirbod</a> for your sponsoring, promotion, contributions and early library adoption 😎</li>
<li><a href="https://github.com/IvanIhnatsiuk" target="_blank" rel="noopener noreferrer">Ivan</a> for your ideas, help and early adoption of this library 💪</li>
<li><a href="https://github.com/ksugaevskaya" target="_blank" rel="noopener noreferrer">Ksu</a> for your sponsoring, help and mental support on every step of this library creation, I appreciate it ❤️</li>
<li><a href="https://github.com/MarceloPrado" target="_blank" rel="noopener noreferrer">Marcelo T Prado</a> for your sponsoring, active participation in issue resolution, contributions, and fresh ideas 🚀</li>
<li><a href="https://github.com/mrtawil" target="_blank" rel="noopener noreferrer">Abed El Rahman Al Tawil</a> for your sponsoring and active involvement in addressing issues 👍</li>
</ul>
<p>Your support and collaboration have strengthened the community and enriched the project. I couldn't have come this far without you. Thank you for believing in the mission and helping me create a better environment for React Native development.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="instead-of-summary">Instead of summary<a class="hash-link" aria-label="Direct link to Instead of summary" title="Direct link to Instead of summary" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-features-achieved-milestones#instead-of-summary">​</a></h2>
<p>The latest features in <code>react-native-keyboard-controller</code> are designed to simplify keyboard interactions and add visual appeal to your React Native applications. Whether you need to ensure your content remains visible when the keyboard is active or want to create stunning animations, this update has got you covered.</p>
<p>To get started, update your package to the latest version of <code>react-native-keyboard-controller</code>, and dive into the documentation to see these features in action.</p>
<p>I look forward to hearing your feedback and suggestions. Feel free to reach out to me or create GitHub <a href="https://github.com/kirillzyusko/react-native-keyboard-controller/issues" target="_blank" rel="noopener noreferrer">issues</a> or <a href="https://github.com/kirillzyusko/react-native-keyboard-controller/discussions" target="_blank" rel="noopener noreferrer">discussions</a>. Happy coding!</p>
<p>Stay tuned for future updates and releases as I continue to enhance the <code>react-native-keyboard-controller</code> library. Follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/kirillzyusko" target="_blank" rel="noopener noreferrer">GitHub</a> for updates. Your support means the world to me, and if you're interested in taking our collaboration to the next level, consider <a href="https://github.com/sponsors/kirillzyusko" target="_blank" rel="noopener noreferrer">sponsoring</a> me on GitHub 😊</p>
<p>Thank you for being part of our community and for your continued support! 🚀</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="new hook" term="new hook"/>
        <category label="sticky view" term="sticky view"/>
        <category label="achieved milestones" term="achieved milestones"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[New setEnabled method]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/set-enabled</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/set-enabled"/>
        <updated>2023-09-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm thrilled to announce the release of react-native-keyboard-controller version 1.8.0. With this latest release, I introduce the useKeyboardController hook and setEnabled method, which allows for a gradual integration of the library into your project, enabling you to disable the module on specific screens as needed. This flexible feature ensures that your app's keyboard behavior remains seamless and user-friendly.]]></summary>
        <content type="html"><![CDATA[<p>I'm thrilled to announce the release of <code>react-native-keyboard-controller</code> version <code>1.8.0</code>. With this latest release, I introduce the <code>useKeyboardController</code> hook and <code>setEnabled</code> method, which allows for a gradual integration of the library into your project, enabling you to disable the module on specific screens as needed. This flexible feature ensures that your app's keyboard behavior remains seamless and user-friendly.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-new-in-version-180-the-setenabled-hook">What's New in Version 1.8.0: The <code>setEnabled</code> Hook<a class="hash-link" aria-label="Direct link to whats-new-in-version-180-the-setenabled-hook" title="Direct link to whats-new-in-version-180-the-setenabled-hook" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/set-enabled#whats-new-in-version-180-the-setenabled-hook">​</a></h2>
<p>The star feature of <code>react-native-keyboard-controller</code> version <code>1.8.0</code> is the introduction of the <code>setEnabled</code> method. This method provides developers with granular control over when and where the library's keyboard management should be active.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-use-setenabled">How to Use <code>setEnabled</code><a class="hash-link" aria-label="Direct link to how-to-use-setenabled" title="Direct link to how-to-use-setenabled" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/set-enabled#how-to-use-setenabled">​</a></h3>
<p>Using the <code>setEnabled</code> method is incredibly straightforward. Here's a quick example of how to integrate it into your React Native project:</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> useKeyboardController </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"react-native-keyboard-controller"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> enabled</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setEnabled </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useKeyboardController</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// if you want to know whether is module active at the moment</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">enabled</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// disable keyboard controller on a specific screen</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">setEnabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this example, we're importing the <code>useKeyboardController</code> hook from the <code>react-native-keyboard-controller</code> library. This hook returns <code>setEnabled</code> method (which you can use to disable keyboard management for a specific screen) and <code>enabled</code> variable (indicating whether the module is active now or not).</p>
<p>When you disable the module using <code>setEnabled(false)</code>, the screen will fallback to the default <code>Android</code> behavior, automatically resizing based on <code>AndroidManifest</code> preferences (<code>android:windowSoftInputMode</code>). This level of control allows you to tailor the keyboard experience to your app's unique needs on a per-screen basis.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="use-cases-for-setenabled">Use Cases for <code>setEnabled</code><a class="hash-link" aria-label="Direct link to use-cases-for-setenabled" title="Direct link to use-cases-for-setenabled" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/set-enabled#use-cases-for-setenabled">​</a></h3>
<p>The <code>setEnabled</code> method is incredibly versatile and can be employed in various scenarios:</p>
<ul>
<li>
<p><strong>Forms</strong>: Disable keyboard management on screens with simple forms that don't require custom keyboard management.</p>
</li>
<li>
<p><strong>Chat Interfaces</strong>: Keep keyboard management enabled for chat screens, ensuring smooth and consistent user experiences during messaging interactions.</p>
</li>
<li>
<p><strong>Gradual Integration</strong>: Tailor keyboard functionality on specific pages where you require precise control over how the keyboard behaves, while leaving other screens unaffected by these adjustments.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/set-enabled#conclusion">​</a></h2>
<p><code>react-native-keyboard-controller</code> continues to evolve, making it an essential tool for React Native developers who want to provide exceptional user experiences in their mobile apps.</p>
<p>With the introduction of the <code>setEnabled</code> method in version <code>1.8.0</code>, you now have even more control over keyboard behavior, ensuring that your app feels polished and responsive 😎</p>
<p>To get started with the latest version, check out the <a href="https://kirillzyusko.github.io/react-native-keyboard-controller/">official documentation</a> and explore the new possibilities that the <code>setEnabled</code> method offers.</p>
<p>Upgrade your React Native project today and take your keyboard management to the next level with <code>react-native-keyboard-controller</code> version <code>1.8.0</code>!</p>
<p>Stay tuned for future updates and releases as I continue to enhance the <code>react-native-keyboard-controller</code> library. Follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/kirillzyusko" target="_blank" rel="noopener noreferrer">GitHub</a> for updates. Thank you for your support! 😊</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="setEnabled" term="setEnabled"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing KeyboardAvoidingView - Elevating Your React Native UI Experience]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components"/>
        <updated>2023-09-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm glad to announce the upcoming release of react-native-keyboard-controller, a library designed to enhance your React Native app's user experience. This release marks a significant milestone as I introduce a powerful new feature: the KeyboardAvoidingView. But that's not all – I have exciting plans to expand the collection of pre-built components to simplify handling keyboard insets even further.]]></summary>
        <content type="html"><![CDATA[<p>I'm glad to announce the upcoming release of <code>react-native-keyboard-controller</code>, a library designed to enhance your React Native app's user experience. This release marks a significant milestone as I introduce a powerful new feature: the <code>KeyboardAvoidingView</code>. But that's not all – I have exciting plans to expand the collection of pre-built components to simplify handling keyboard insets even further.</p>
<!-- -->
<table><tbody><tr style="border:none"><td style="border:none"><div style="padding-left:20%;padding-right:20%" class="lottie"></div></td><td style="border:none"><div style="padding-left:20%;padding-right:20%" class="lottie"></div></td></tr><tr style="border:none;background-color:#00000000"><td style="border:none;max-width:400px;text-align:center"><i>Default <code>react-native</code> implementation on Android</i></td><td style="border:none;max-width:400px;text-align:center"><i>Implementation from <code>react-native-keyboard-controller</code> with better animations</i></td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-better-way-to-handle-keyboard-insets">A Better Way to Handle Keyboard Insets<a class="hash-link" aria-label="Direct link to A Better Way to Handle Keyboard Insets" title="Direct link to A Better Way to Handle Keyboard Insets" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components#a-better-way-to-handle-keyboard-insets">​</a></h2>
<p>One of the common challenges React Native developers face is handling the keyboard's appearance and disappearance gracefully. It's especially important when you want your app to look and feel polished on both <code>iOS</code> and <code>Android</code> devices. While the built-in <code>KeyboardAvoidingView</code> component in React Native works well for <code>iOS</code>, it doesn't provide the same level of smoothness and consistency on <code>Android</code>.</p>
<p>I have been hard at work, and in this upcoming release, I'm thrilled to unveil the enhanced <code>KeyboardAvoidingView</code>. With this component, you can achieve a seamless keyboard animation experience across both major platforms – <code>iOS</code> and <code>Android</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="features-of-keyboardavoidingview">Features of <code>KeyboardAvoidingView</code><a class="hash-link" aria-label="Direct link to features-of-keyboardavoidingview" title="Direct link to features-of-keyboardavoidingview" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components#features-of-keyboardavoidingview">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="platform-agnostic-animation">Platform-agnostic Animation<a class="hash-link" aria-label="Direct link to Platform-agnostic Animation" title="Direct link to Platform-agnostic Animation" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components#platform-agnostic-animation">​</a></h3>
<p>With the new <code>KeyboardAvoidingView</code>, you can say goodbye to platform-specific workarounds. This component is designed to work harmoniously on both <code>iOS</code> and <code>Android</code>, ensuring a consistent user experience throughout your app.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="smoother-animations">Smoother Animations<a class="hash-link" aria-label="Direct link to Smoother Animations" title="Direct link to Smoother Animations" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components#smoother-animations">​</a></h3>
<p>The enhanced <code>KeyboardAvoidingView</code> offers smoother and more natural animations when the keyboard appears or disappears. This means your UI elements will gracefully adjust to accommodate the keyboard, preventing awkward overlaps and ensuring your users can interact with your app seamlessly.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="backward-compatible-and-seamless-integration">Backward Compatible and Seamless Integration<a class="hash-link" aria-label="Direct link to Backward Compatible and Seamless Integration" title="Direct link to Backward Compatible and Seamless Integration" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components#backward-compatible-and-seamless-integration">​</a></h3>
<p>I understand the importance of maintaining compatibility with existing code bases and providing a smooth transition for React Native developers. With enhanced <code>KeyboardAvoidingView</code>, I've put compatibility at the forefront of design principles.</p>
<p>The <code>KeyboardAvoidingView</code> is crafted to seamlessly integrate with your existing React Native projects. It's a <strong>drop-in</strong> replacement for the default React Native <code>KeyboardAvoidingView</code> component. This means that you can start using an enhanced version without the need for extensive code modifications or rewrites.</p>
<p>Whether you're working on a brand-new project or updating an existing app, making the switch to re-implemented <code>KeyboardAvoidingView</code> is as simple as updating your import statements. Your existing codebase remains intact, and the benefits of smoother animations and cross-platform compatibility come without the hassle 😎</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customizable">Customizable<a class="hash-link" aria-label="Direct link to Customizable" title="Direct link to Customizable" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components#customizable">​</a></h3>
<p>I believe that the best tools are those that adapt to your unique project requirements. That's why I'm excited to introduce a dedicated avenue for customization. If you find that the default behavior of <code>KeyboardAvoidingView</code> doesn't precisely align with your app's needs, I encourage you to explore the possibilities of customization 🤓</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="share-your-ideas-and-report-bugs-">Share Your Ideas and Report Bugs 💡<a class="hash-link" aria-label="Direct link to Share Your Ideas and Report Bugs 💡" title="Direct link to Share Your Ideas and Report Bugs 💡" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components#share-your-ideas-and-report-bugs-">​</a></h4>
<p>Your feedback is invaluable to me. If you have ideas for new features, improvements, or you encounter any issues while using <code>KeyboardAvoidingView</code>, I invite you to get involved. Feel free to submit your suggestions, feature requests, or bug reports through my <a href="https://github.com/kirillzyusko/react-native-keyboard-controller" target="_blank" rel="noopener noreferrer">GitHub</a> repository.</p>
<p>The community is built on collaboration, and together, I believe we can make this library even better. By actively participating and sharing your insights, you contribute to the growth and enhancement of <code>react-native-keyboard-controller</code> and <code>KeyboardAvoidingView</code> in a particular.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-coming-next">What's Coming Next<a class="hash-link" aria-label="Direct link to What's Coming Next" title="Direct link to What's Coming Next" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/components#whats-coming-next">​</a></h2>
<p>While I'm excited to introduce the <code>KeyboardAvoidingView</code> in this release, my commitment to making your React Native development experience smoother doesn't stop here. I have big plans to expand the library with more pre-built components designed to simplify complex tasks related to keyboard handling.</p>
<p>In the pipeline, you can look forward to components like <code>KeyboardAwareScrollView</code> for effortlessly managing scroll views, <code>StickyFooter</code> for keeping crucial UI elements in view, and much more. My goal is to provide you with a comprehensive toolkit for creating exceptional user interfaces in React Native.</p>
<p>Stay tuned for future updates and releases as I continue to enhance the <code>react-native-keyboard-controller</code> library. Follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/kirillzyusko" target="_blank" rel="noopener noreferrer">GitHub</a> for updates. Thank you for your support! 😊</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="avoiding view" term="avoiding view"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Enhanced events metadata - say goodbye to guesswork and hello to precision!]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/enhanced-metadata</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/enhanced-metadata"/>
        <updated>2023-08-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm thrilled to unveil the latest upgrade to the react-native-keyboard-controller library - version 1.6.0! This release is all about empowering developers like you with enhanced event metadata, providing you with advanced techniques to take your keyboard handling to the next level.]]></summary>
        <content type="html"><![CDATA[<p>I'm thrilled to unveil the latest upgrade to the <code>react-native-keyboard-controller</code> library - version <code>1.6.0</code>! This release is all about empowering developers like you with enhanced event metadata, providing you with advanced techniques to take your keyboard handling to the next level.</p>
<!-- -->
<div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px" class="lottie"></div></div>
<p><strong>Say goodbye to guesswork and hello to precision!</strong> React Native Keyboard Controller <code>1.6.0</code> introduces a trio of new fields in the event metadata that will revolutionize the way you manage keyboard interactions in your React Native applications 😎</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-features">Key features<a class="hash-link" aria-label="Direct link to Key features" title="Direct link to Key features" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/enhanced-metadata#key-features">​</a></h2>
<p>Below you can find a list of key features added in this release 😊</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="timestamp-sync-your-animations-seamlessly">Timestamp: Sync your animations seamlessly<a class="hash-link" aria-label="Direct link to Timestamp: Sync your animations seamlessly" title="Direct link to Timestamp: Sync your animations seamlessly" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/enhanced-metadata#timestamp-sync-your-animations-seamlessly">​</a></h3>
<p>The addition of the <code>timestamp</code> field in the event metadata marks a breakthrough in keyboard handling. Now, you can precisely calculate the delay between an event occurring in the native thread and its propagation to JavaScript. This level of accuracy enables you to orchestrate keyboard handling with finesse, ensuring a seamless and visually pleasing user experience.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="target-layout-mastery-at-your-fingertips">Target: Layout mastery at your fingertips<a class="hash-link" aria-label="Direct link to Target: Layout mastery at your fingertips" title="Direct link to Target: Layout mastery at your fingertips" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/enhanced-metadata#target-layout-mastery-at-your-fingertips">​</a></h3>
<p>Unlock the potential of enhanced layout handling with the <code>target</code> field in event metadata. By accessing the view tag of the focused field, you can synchronously retrieve layout information. This newfound capability empowers you to make real-time adjustments to your UI elements based on the active input, creating a fluid and context-aware user interface.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="duration-elevate-animation-fluidity">Duration: Elevate animation fluidity<a class="hash-link" aria-label="Direct link to Duration: Elevate animation fluidity" title="Direct link to Duration: Elevate animation fluidity" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/enhanced-metadata#duration-elevate-animation-fluidity">​</a></h3>
<p>Experience the art of animation depth with the <code>duration</code> field in event metadata. If you're aiming for parallax-like effects without the intricacies of frame-in-frame keyboard animations, this feature is your key! Define the <code>duration</code> of the keyboard animation to achieve a captivating parallax effect that adds a touch of elegance to your app's visual appeal.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next?<a class="hash-link" aria-label="Direct link to What's next?" title="Direct link to What's next?" href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/enhanced-metadata#whats-next">​</a></h2>
<p>I'm also excited to share a sneak peek into what's on the horizon 😎</p>
<p>During the <code>1.6.0</code> development cycle, I've delved even deeper into keyboard handling, uncovering insights that will shape the way you interact with keyboards in your React Native apps. So my investigation has inspired a new API that will make keyboard interactions more intuitive and seamless. Whether you're a seasoned developer or just starting out, managing keyboards will become a breeze.</p>
<p>Also I will be actively addressing GitHub issues and ensuring compatibility with the latest React Native version. My commitment to excellence means you can rely on a stable and up-to-date library 😊</p>
<p>Follow me on <a href="https://twitter.com/ziusko" target="_blank" rel="noopener noreferrer">Twitter</a> for updates. Thank you for your support!</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="focused text input" term="focused text input"/>
        <category label="duration" term="duration"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interactive keyboard support]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/interactive-keyboard</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/interactive-keyboard"/>
        <updated>2023-04-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm excited to announce that the upcoming release of react-native-keyboard-controller, version 1.5.0, will include a new feature that allows users to control the position of the keyboard on the screen via gestures. This new interactive keyboard feature will make it easier for users to interact with the keyboard in a more natural and intuitive way, improving the overall user experience of your React Native app.]]></summary>
        <content type="html"><![CDATA[<p>I'm excited to announce that the upcoming release of <code>react-native-keyboard-controller</code>, version <code>1.5.0</code>, will include a new feature that allows users to control the position of the keyboard on the screen via gestures. This new interactive keyboard feature will make it easier for users to interact with the keyboard in a more natural and intuitive way, improving the overall user experience of your React Native app.</p>
<!-- -->
<div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px" class="lottie"></div></div>
<p>The interactive keyboard feature is customizable on Android 🤖, allowing developers to define how the gesture controls the keyboard position and how the view should be animated when the keyboard is moved. This new feature is particularly useful for chat and other apps that require precise control over the position of the keyboard. The addition of this new interactive keyboard feature will further enhance the library's capabilities and provide a more natural and intuitive user experience.</p>
<p>Stay tuned for more updates and be sure to check out our documentation for more information on how to use this new feature in your React Native app.</p>
<p>Thank you for choosing <code>react-native-keyboard-controller</code>! 😊</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="interactive" term="interactive"/>
        <category label="android" term="android"/>
        <category label="ios" term="ios"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Version 1.4.0 with new hook]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-hook</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/new-hook"/>
        <updated>2022-10-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[New 1.4.0 release enhance API and adds new useKeyboardHandler hook. While keeping no breaking changes this release (via new hook) adds an ability to have intermediate values on iOS for height and progress values (before it was not possible and it was a restriction of the library).]]></summary>
        <content type="html"><![CDATA[<p>New 1.4.0 release enhance API and adds new <code>useKeyboardHandler</code> hook. While keeping no breaking changes this release (via new hook) adds an ability to have intermediate values on iOS for <code>height</code> and <code>progress</code> values (before it was not possible and it was a restriction of the library).</p>
<p>Also this hooks allow to track keyboard lifecycle and it's better suit for complex animations 😎</p>
<p>Check out the new documentation for this hook, upgrade library version to <code>1.4.0</code> and start using it today!</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="new hook" term="new hook"/>
        <category label="iOS" term="iOS"/>
        <category label="intermediate values" term="intermediate values"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Version 1.2.0 with new architecture support]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/fabric</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/fabric"/>
        <updated>2022-09-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm glad to announce, that new upcoming release 1.2.0 brings a support for new react native architecture 😎]]></summary>
        <content type="html"><![CDATA[<p>I'm glad to announce, that new upcoming release <code>1.2.0</code> brings a support for new react native architecture 😎</p>
<p>Fortunately this library is backward compatible with old architecture and will be compiled conditionally depending on which architecture you are using. So don't be afraid of updating it to the latest version - it doesn't have any breaking changes!</p>
<div class="playwright"><p><img decoding="async" loading="lazy" alt="react native logo" src="https://kirillzyusko.github.io/react-native-keyboard-controller/assets/images/react-native-53fe9c4e0ebe3c3ff285c169eaaff011.png#img-thumbnail" width="1160" height="560" class="img_ev3q"></p></div>
<p>The decision to add support for a new architecture (to prioritize a new architecture adoption over other features) was made in order to understand all peculiarities of the new architecture and to discover its possibilities. Hopefully such knowledge can help add new features for the library in the future.</p>
<p>Obviously, the migration process will take some time for other libraries, so future versions of this library will still support two architectures. When most other open source libraries will be migrated to the new architecture and the new architecture becomes the standard in the react native ecosystem, then support for the old architecture will be removed.</p>
<p>Stay tuned for future updates! 😊</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="release" term="release"/>
        <category label="new architecture" term="new architecture"/>
        <category label="fabric" term="fabric"/>
        <category label="turbo modules" term="turbo modules"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native meets smooth keyboard animations]]></title>
        <id>https://kirillzyusko.github.io/react-native-keyboard-controller/blog/welcome</id>
        <link href="https://kirillzyusko.github.io/react-native-keyboard-controller/blog/welcome"/>
        <updated>2022-06-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Many flagship applications that are written natively (such as Telegram, Instagram, etc.) use the full power of platform-specific native APIs (iOS, Android) to make transitions between opening/closing the keyboard animated and smooth.]]></summary>
        <content type="html"><![CDATA[<p>Many flagship applications that are written natively (such as <code>Telegram</code>, <code>Instagram</code>, etc.) use the full power of platform-specific native APIs (<code>iOS</code>, <code>Android</code>) to make transitions between opening/closing the keyboard animated and smooth.</p>
<p>Unfortunately, in <code>react-native</code> this aspect was given little attention and all <code>react-native</code> applications were suffering because of that - animations were rough, you couldn't write cross-platform code because some keyboard events were not available, etc. But with the advent of this library, everything changes... 😎</p>
<!-- -->
<div style="display:flex;justify-content:center;margin-bottom:20px"><div style="width:400px;height:400px" class="lottie"></div></div>
<p>The purpose of this library was utilizing all power of native API and at the same time provide a universal way in <code>react-native</code> to deal with it (allowing to use some platforms advanced technics if needed). Thus this library allows you to track each keyboard frame movement, and create corresponding reactions (move elements accordingly).</p>
<p>The first release of this library brings missing <code>keyboardWillShow</code>/<code>keyboardWillHide</code> events on <code>Android</code> making <code>events</code> module fully cross-platform as well as adding a way to use <code>Animated.Value</code> for managing keyboard frames.</p>
<p>In further releases the API will be enhanced:</p>
<ul>
<li>support will be added for interactive keyboard dismissing (on Android)</li>
<li>the library will be rewritten to new <code>Fabric</code> architecture</li>
<li>maybe some components, such as <code>KeyboardAvoidingView</code>/<code>KeyboardAwareScrollView</code> will be available here with better performance and animations.</li>
</ul>
<p>Stay tuned! 😊</p>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="react-native" term="react-native"/>
        <category label="keyboard" term="keyboard"/>
        <category label="animation" term="animation"/>
    </entry>
</feed>