"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9819],{31076:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var r=o(74848),n=o(28453);const a={keywords:["react-native-keyboard-controller","useKeyboardState","react hook"],sidebar_position:4},s="useKeyboardState",d={id:"api/hooks/keyboard/use-keyboard-state",title:"useKeyboardState",description:"useKeyboardState is a hook which gives an access to current keyboard state.",source:"@site/docs/api/hooks/keyboard/use-keyboard-state.md",sourceDirName:"api/hooks/keyboard",slug:"/api/hooks/keyboard/use-keyboard-state",permalink:"/react-native-keyboard-controller/pr-preview/pr-894/docs/next/api/hooks/keyboard/use-keyboard-state",draft:!1,unlisted:!1,editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/docs/api/hooks/keyboard/use-keyboard-state.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{keywords:["react-native-keyboard-controller","useKeyboardState","react hook"],sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"useKeyboardHandler",permalink:"/react-native-keyboard-controller/pr-preview/pr-894/docs/next/api/hooks/keyboard/use-keyboard-handler/"},next:{title:"useFocusedInputHandler",permalink:"/react-native-keyboard-controller/pr-preview/pr-894/docs/next/api/hooks/input/use-focused-input-handler"}},i={},c=[{value:"Data structure",id:"data-structure",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"usekeyboardstate",children:"useKeyboardState"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"useKeyboardState"})," is a hook which gives an access to current keyboard state."]}),"\n",(0,r.jsxs)(t.admonition,{type:"warning",children:[(0,r.jsxs)(t.p,{children:["Use this hook only when you need to change props of views that you return from render. If you need to read keyboard state in callbacks/event handlers consider to use ",(0,r.jsx)(t.a,{href:"/react-native-keyboard-controller/pr-preview/pr-894/docs/next/api/keyboard-controller#state",children:"KeyboardController.state()"})," method to get values on demand and avoid unnecessary re-renders."]}),(0,r.jsxs)("div",{class:"code-grid",children:[(0,r.jsx)("div",{class:"code-block",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:'title="\u2705 Recommended \ud83d\udc4d"',children:"<Button\n  onPress={() => {\n    const state = KeyboardController.state();\n    if (state?.height > 0) {\n      // ...\n    }\n  }}\n>\n  Go to Next Page\n</Button>\n"})})}),(0,r.jsx)("div",{class:"code-block",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:'title="\u274c Not recommended \ud83d\ude45\u200d\u2642\ufe0f"',children:"const {height} = useKeyboardState();\n<Button\n  onPress={() => {\n    // don't consume `height` from hook\n    if (height > 0) {\n      // ...\n    }\n  }}\n>\n  Go to next Page\n</Button>\n"})})})]})]}),"\n",(0,r.jsx)(t.h2,{id:"data-structure",children:"Data structure"}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'import { useKeyboardAnimation } from "react-native-keyboard-controller";\n\nconst { height, progress } = useKeyboardAnimation();\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Also have a look on ",(0,r.jsx)(t.a,{href:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/example",children:"example"})," app for more comprehensive usage."]})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>d});var r=o(96540);const n={},a=r.createContext(n);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);