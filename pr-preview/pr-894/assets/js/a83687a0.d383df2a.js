"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2183],{95092:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=o(74848),n=o(28453);const s={keywords:["react-native-keyboard-controller","useKeyboardState","react hook"],sidebar_position:4},a="useKeyboardState",i={id:"api/hooks/keyboard/use-keyboard-state",title:"useKeyboardState",description:"useKeyboardState is a hook which gives an access to current keyboard state.",source:"@site/docs/api/hooks/keyboard/use-keyboard-state.mdx",sourceDirName:"api/hooks/keyboard",slug:"/api/hooks/keyboard/use-keyboard-state",permalink:"/react-native-keyboard-controller/pr-preview/pr-894/docs/next/api/hooks/keyboard/use-keyboard-state",draft:!1,unlisted:!1,editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/docs/api/hooks/keyboard/use-keyboard-state.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{keywords:["react-native-keyboard-controller","useKeyboardState","react hook"],sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"useKeyboardHandler",permalink:"/react-native-keyboard-controller/pr-preview/pr-894/docs/next/api/hooks/keyboard/use-keyboard-handler/"},next:{title:"useFocusedInputHandler",permalink:"/react-native-keyboard-controller/pr-preview/pr-894/docs/next/api/hooks/input/use-focused-input-handler"}},d={},c=[{value:"Data structure",id:"data-structure",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"usekeyboardstate",children:"useKeyboardState"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"useKeyboardState"})," is a hook which gives an access to current keyboard state."]}),"\n",(0,r.jsxs)(t.admonition,{type:"warning",children:[(0,r.jsxs)(t.p,{children:["Use this hook only when you need to control ",(0,r.jsx)(t.code,{children:"props"})," of views returned in JSX-markup. If you need to access the keyboard ",(0,r.jsx)(t.code,{children:"state"})," in callbacks or event handlers then consider to use ",(0,r.jsx)(t.a,{href:"/react-native-keyboard-controller/pr-preview/pr-894/docs/next/api/keyboard-controller#state",children:"KeyboardController.state()"})," method instead. This allows you to retrieve values as needed without triggering unnecessary re-renders."]}),(0,r.jsxs)("div",{className:"code-grid",children:[(0,r.jsx)("div",{className:"code-block",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:'title="\u2705 Recommended \ud83d\udc4d"',children:"// use KeyboardController.state()\n\n<Button\n  onPress={() => {\n    const state = KeyboardController.state();\n    if (state?.isVisible) {\n      // ...\n    }\n  }}\n>\n  Go to Next Page\n</Button>\n"})})}),(0,r.jsx)("div",{className:"code-block",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:'title="\u274c Not recommended \ud83d\ude45\u200d\u2642\ufe0f"',children:"const { isVisible } = useKeyboardState();\n\n<Button\n  onPress={() => {\n    // don't consume state from hook\n    if (isVisible) {\n      // ...\n    }\n  }}\n>\n  Go to next Page\n</Button>;\n"})})})]})]}),"\n",(0,r.jsx)(t.h2,{id:"data-structure",children:"Data structure"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"useKeyboardState"})," returns a ",(0,r.jsx)(t.a,{href:"/react-native-keyboard-controller/pr-preview/pr-894/docs/next/api/keyboard-controller#state",children:(0,r.jsx)(t.code,{children:"KeyboardState"})})," object."]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'import { View, Text, StyleSheet } from "react-native";\nimport { useKeyboardState } from "react-native-keyboard-controller";\n\nconst ShowcaseComponent = () => {\n  const { isVisible } = useKeyboardState();\n\n  return (\n    <View style={isVisible ? styles.highlighted : null}>\n      <Text>Address form</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  highlighted: {\n    borderColor: "#0070D8",\n  },\n});\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Also have a look on ",(0,r.jsx)(t.a,{href:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/example",children:"example"})," app for more comprehensive usage."]})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>i});var r=o(96540);const n={},s=r.createContext(n);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);