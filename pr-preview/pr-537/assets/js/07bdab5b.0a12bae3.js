"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3755],{36647:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var o=r(85893),a=r(11151);const n={slug:"release-1-13",title:"Announcing upcoming 1.13 release \ud83d\udce3",authors:["kirill"],tags:["react-native","keyboard","modal","translucent status bar","offset"],keywords:["react-native-keyboard-controller","keyboard","modal","status bar translucent","keyboard gesture area offset"]},s=void 0,l={permalink:"/react-native-keyboard-controller/pr-preview/pr-537/blog/release-1-13",editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2024-09-01-release-1-13/index.mdx",source:"@site/blog/2024-09-01-release-1-13/index.mdx",title:"Announcing upcoming 1.13 release \ud83d\udce3",description:"I'm excited to announce the latest release, version 1.13.0, of react-native-keyboard-controller!",date:"2024-09-01T00:00:00.000Z",formattedDate:"September 1, 2024",tags:[{label:"react-native",permalink:"/react-native-keyboard-controller/pr-preview/pr-537/blog/tags/react-native"},{label:"keyboard",permalink:"/react-native-keyboard-controller/pr-preview/pr-537/blog/tags/keyboard"},{label:"modal",permalink:"/react-native-keyboard-controller/pr-preview/pr-537/blog/tags/modal"},{label:"translucent status bar",permalink:"/react-native-keyboard-controller/pr-preview/pr-537/blog/tags/translucent-status-bar"},{label:"offset",permalink:"/react-native-keyboard-controller/pr-preview/pr-537/blog/tags/offset"}],readingTime:1.85,hasTruncateMarker:!0,authors:[{name:"Kirill Zyusko",title:"Library author",url:"https://github.com/kirillzyusko",imageURL:"https://github.com/kirillzyusko.png",key:"kirill"}],frontMatter:{slug:"release-1-13",title:"Announcing upcoming 1.13 release \ud83d\udce3",authors:["kirill"],tags:["react-native","keyboard","modal","translucent status bar","offset"],keywords:["react-native-keyboard-controller","keyboard","modal","status bar translucent","keyboard gesture area offset"]},unlisted:!1,nextItem:{title:"Announcing upcoming release \ud83d\udce3",permalink:"/react-native-keyboard-controller/pr-preview/pr-537/blog/release-1-12"}},i={authorsImageUrls:[void 0]},d=[{value:"<code>Modal</code> support on Android",id:"modal-support-on-android",level:2},{value:"Support for <code>StatusBar.translucent</code>",id:"support-for-statusbartranslucent",level:2},{value:"New <code>offset</code> prop for <code>KeyboardGestureArea</code>",id:"new-offset-prop-for-keyboardgesturearea",level:2},{value:"<code>react-native@0.75</code> support",id:"react-native075-support",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}];function c(e){const t={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["I'm excited to announce the latest release, version ",(0,o.jsx)(t.code,{children:"1.13.0"}),", of ",(0,o.jsx)(t.code,{children:"react-native-keyboard-controller"}),"!"]}),"\n",(0,o.jsxs)(t.h2,{id:"modal-support-on-android",children:[(0,o.jsx)(t.code,{children:"Modal"})," support on Android"]}),"\n",(0,o.jsxs)(t.p,{children:["Starting from the very first version of this library it was impossible to use the functionality of this library inside the ",(0,o.jsx)(t.code,{children:"Modal"}),". It was caused by next factors:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["the ",(0,o.jsx)(t.code,{children:"Modal"})," window lives in its own view hierarchy;"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"react-native"})," set ",(0,o.jsx)(t.code,{children:"adjustResize"})," mode to ",(0,o.jsx)(t.code,{children:"window"})," of the ",(0,o.jsx)(t.code,{children:"Modal"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["As a result whenever you tru to use ",(0,o.jsx)(t.code,{children:"react-native-keyboard-controller"})," inside the ",(0,o.jsx)(t.code,{children:"Modal"})," you will get a default behavior (but sometimes even mixed behaviors, i. e. hooks will report keyboard height and ",(0,o.jsx)(t.code,{children:"Modal"})," content will be automatically resized)."]}),"\n",(0,o.jsx)(t.p,{children:"As a temporary workaround people were using a workaround with module disabling:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import { useKeyboardController } from "react-native-keyboard-controller";\n\n// ... somewhere in your modal screen ...\n\nconst { enabled, setEnabled } = useKeyboardController();\n\nuseEffect(() => {\n  setEnabled(false);\n}, []);\n'})}),"\n",(0,o.jsx)(t.p,{children:"To fallback to a fully default behavior. While it was working approach it still had some downsides, such as inconsistent keyboard handling/animations across the app."}),"\n",(0,o.jsxs)(t.p,{children:["With the new release it's not a problem anymore - now you can use all hooks and components inside the ",(0,o.jsx)(t.code,{children:"Modal"})," without additional hustle and it will just work out of the box."]}),"\n",(0,o.jsxs)(t.h2,{id:"support-for-statusbartranslucent",children:["Support for ",(0,o.jsx)(t.code,{children:"StatusBar.translucent"})]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"StatusBar"})," integration was always a problematic because ",(0,o.jsx)(t.code,{children:"react-native"})," uses deprecated methods that eventually breaks keyboard events. This module exports its own ",(0,o.jsx)(t.code,{children:"StatusBarManagerCompat"})," module and uses this module automatically to handle ",(0,o.jsx)(t.code,{children:"StatusBar"})," changes."]}),"\n",(0,o.jsxs)(t.p,{children:["The problem was in the fact that ",(0,o.jsx)(t.code,{children:"StatusBarManagerCompat"})," module didn't react on ",(0,o.jsx)(t.code,{children:"translucent"})," prop changes. Now it's not the case and you can disable/enable ",(0,o.jsx)(t.code,{children:"translucent"})," property dynamically."]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["You may think that ",(0,o.jsx)(t.code,{children:"statusBarTranslucent"})," prop on ",(0,o.jsx)(t.code,{children:"KeyboardProvider"})," is not needed anymore, but I would recommend to keep it - it'll help to layout ",(0,o.jsx)(t.code,{children:"KeyboardProvider"})," properly in one frame without frame jumps."]})}),"\n",(0,o.jsxs)(t.h2,{id:"new-offset-prop-for-keyboardgesturearea",children:["New ",(0,o.jsx)(t.code,{children:"offset"})," prop for ",(0,o.jsx)(t.code,{children:"KeyboardGestureArea"})]}),"\n",(0,o.jsxs)(t.p,{children:["Starting from this release I'm adding more customization to interactive keyboard handling. Now on ",(0,o.jsx)(t.code,{children:"Android"})," you can add ",(0,o.jsx)(t.code,{children:"offset"})," property (which can be equal to your ",(0,o.jsx)(t.code,{children:"TextInput"})," height) to your ",(0,o.jsx)(t.code,{children:"KeyboardGestureArea"})," component - it'll allow you to extend the keyboard area and start dismiss gesture starting from the ",(0,o.jsx)(t.code,{children:"TextInput"})," top border and not from the keyboard itself."]}),"\n",(0,o.jsxs)(t.h2,{id:"react-native075-support",children:[(0,o.jsx)(t.code,{children:"react-native@0.75"})," support"]}),"\n",(0,o.jsx)(t.h2,{id:"whats-next",children:"What's next?"})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},11151:(e,t,r)=>{r.d(t,{Z:()=>l,a:()=>s});var o=r(67294);const a={},n=o.createContext(a);function s(e){const t=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(n.Provider,{value:t},e.children)}}}]);