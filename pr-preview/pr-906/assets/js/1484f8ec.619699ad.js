"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2838],{3432:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>n,metadata:()=>i,toc:()=>l});var o=a(74848),r=a(28453);const n={slug:"use-keyboard-state",title:"Meet new 1.17 release with useKeyboardState hook \ud83d\udc4b",authors:["kirill"],tags:["react-native","keyboard","useKeyboardState"],keywords:["react-native-keyboard-controller","useKeyboardState"]},s=void 0,i={permalink:"/react-native-keyboard-controller/pr-preview/pr-906/blog/use-keyboard-state",editUrl:"https://github.com/kirillzyusko/react-native-keyboard-controller/tree/main/docs/blog/2025-04-14-release-1-17/index.mdx",source:"@site/blog/2025-04-14-release-1-17/index.mdx",title:"Meet new 1.17 release with useKeyboardState hook \ud83d\udc4b",description:"Say hello to new 1.17.0 release of react-native-keyboard-controller \ud83d\udc4b",date:"2025-04-14T00:00:00.000Z",tags:[{inline:!0,label:"react-native",permalink:"/react-native-keyboard-controller/pr-preview/pr-906/blog/tags/react-native"},{inline:!0,label:"keyboard",permalink:"/react-native-keyboard-controller/pr-preview/pr-906/blog/tags/keyboard"},{inline:!0,label:"useKeyboardState",permalink:"/react-native-keyboard-controller/pr-preview/pr-906/blog/tags/use-keyboard-state"}],readingTime:2.34,hasTruncateMarker:!0,authors:[{name:"Kirill Zyusko",title:"Library author",url:"https://github.com/kirillzyusko",imageURL:"https://github.com/kirillzyusko.png",key:"kirill"}],frontMatter:{slug:"use-keyboard-state",title:"Meet new 1.17 release with useKeyboardState hook \ud83d\udc4b",authors:["kirill"],tags:["react-native","keyboard","useKeyboardState"],keywords:["react-native-keyboard-controller","useKeyboardState"]},unlisted:!1,nextItem:{title:"Interactive keyboard on iOS with offset \ud83d\udd25",permalink:"/react-native-keyboard-controller/pr-preview/pr-906/blog/interactive-keyboard-ios-with-offset"}},d={authorsImageUrls:[void 0]},l=[{value:"New <code>useKeyboardState</code> hook \ud83d\udd25",id:"new-usekeyboardstate-hook-",level:2},{value:"Custom C++ Shadow Nodes",id:"custom-c-shadow-nodes",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Say hello to new ",(0,o.jsx)(t.code,{children:"1.17.0"})," release of ",(0,o.jsx)(t.code,{children:"react-native-keyboard-controller"})," \ud83d\udc4b"]}),"\n",(0,o.jsx)(t.p,{children:"This update is packed with new hook, custom C++ shadow nodes and of course bug-fixing \ud83d\ude0e."}),"\n",(0,o.jsx)(t.p,{children:"Let\u2019s dive in and explore what\u2019s new! \ud83d\udc47"}),"\n",(0,o.jsx)("div",{className:"playwright center",children:(0,o.jsx)("img",{className:"svg",src:a(13897).A,alt:"Example banner"})}),"\n",(0,o.jsxs)(t.h2,{id:"new-usekeyboardstate-hook-",children:["New ",(0,o.jsx)(t.code,{children:"useKeyboardState"})," hook \ud83d\udd25"]}),"\n",(0,o.jsxs)(t.p,{children:["Since the very first version of this library this package could expose keyboard events via ",(0,o.jsx)(t.code,{children:"KeyboardEvents"})," module. However many people had to create their own wrapper around that module to map the value to ",(0,o.jsx)(t.code,{children:"ref"})," or ",(0,o.jsx)(t.code,{children:"state"})," variable. In the ",(0,o.jsx)(t.code,{children:"1.15.0"})," release a new API ",(0,o.jsx)(t.code,{children:"KeyboardController.state()"})," was added that allowed to read the keyboard state without creating a listener in callback function. However if developers wanted to change state based on keyboard presence (for example to render something conditionally) they had to utilize ",(0,o.jsx)(t.code,{children:"KeyboardEvents"})," directly and write boilerplate code."]}),"\n",(0,o.jsxs)(t.p,{children:["Starting from this release it's not needed anymore and you can use ",(0,o.jsx)(t.code,{children:"useKeyboardState"})," hook to get the keyboard state in a declarative way."]}),"\n",(0,o.jsxs)(t.p,{children:["Along with adding the new hook I made some adjustments to ",(0,o.jsx)(t.code,{children:"KeyboardController.state()"})," to use it in a more convenient way. Starting from now that method always returns a defined value and it's not necessary to write optional chaining to get the actual keyboard state!"]}),"\n",(0,o.jsx)(t.h2,{id:"custom-c-shadow-nodes",children:"Custom C++ Shadow Nodes"}),"\n",(0,o.jsxs)(t.p,{children:["When new ",(0,o.jsx)(t.code,{children:"OverKeyboardView"})," was added we had an issue on Android/Fabric - the view couldn't be stretched to full screen size. This is because all layout now is calculated in C++ and if you want to change the size of your component you have to push that state in C++. The new approach with dealing with shadow nodes require changes in linking and overall it's a pretty big piece of work, so back in times I decided to publish ",(0,o.jsx)(t.code,{children:"OverKeyboardView"})," as is (in general that component had also many changes so gradual release was a good strategy). Now when new architecture became a default in RN I had to address that issue, so starting from this release I include custom (not auto-generated) shadow-nodes."]}),"\n",(0,o.jsxs)(t.p,{children:["If you encounter any build issues make sure to make a ",(0,o.jsx)(t.a,{href:"https://github.com/kirillzyusko/react-native-keyboard-controller/issues/786#issuecomment-2741464142",children:"clean"})," build and try again. If you continue to encounter build issues after upgrading to the latest version, please open an ",(0,o.jsx)(t.a,{href:"https://github.com/kirillzyusko/react-native-keyboard-controller/issues/new?template=bug_report.md",children:"issue"})," and I'll try to help you."]}),"\n",(0,o.jsx)(t.h2,{id:"whats-next",children:"What's next?"}),"\n",(0,o.jsx)(t.p,{children:"As always, my immediate priority is addressing open issues. Additionally, I have plans for upcoming updates:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Adding support for ",(0,o.jsx)(t.code,{children:"react-native@0.79"}),";"]}),"\n",(0,o.jsxs)(t.li,{children:["Most likely a new component ",(0,o.jsx)(t.code,{children:"KeyboardExtender"})," will be added that will be embedded directly into the keyboard;"]}),"\n",(0,o.jsxs)(t.li,{children:["Adding ",(0,o.jsx)(t.code,{children:"KeyboardToolbar.Group"})," component for splitting up many inputs into separate groups and have a separate state and navigation between those groups."]}),"\n",(0,o.jsxs)(t.li,{children:["A major rewrite of ",(0,o.jsx)(t.code,{children:"KeyboardAwareScrollView"})," to use cursor positioning instead of layout."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Stay tuned and follow me on ",(0,o.jsx)(t.a,{href:"https://twitter.com/ziusko",children:"Twitter"})," and ",(0,o.jsx)(t.a,{href:"https://github.com/kirillzyusko",children:"GitHub"})," for updates. Thank you for your support! \ud83d\ude0a"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},13897:(e,t,a)=>{a.d(t,{A:()=>o});const o=a.p+"assets/images/use-keyboard-state-147782c03c92b23356da2e7a8f5b051d.png"},28453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>i});var o=a(96540);const r={},n=o.createContext(r);function s(e){const t=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(n.Provider,{value:t},e.children)}}}]);